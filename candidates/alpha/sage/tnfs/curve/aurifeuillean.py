import sage

from sys import version_info
if version_info[0] < 3:
    from exceptions import ValueError
from sage.functions.log import log
from sage.functions.other import ceil, sqrt
from sage.arith.misc import XGCD, xgcd, gcd
from sage.arith.functions import lcm
from sage.misc.functional import cyclotomic_polynomial
from sage.rings.integer import Integer
from sage.rings.integer_ring import Z, ZZ
from sage.rings.rational_field import Q, QQ
from sage.rings.number_field.number_field import CyclotomicField
from sage.rings.number_field.number_field import NumberField
from sage.rings.finite_rings.finite_field_constructor import FiniteField, GF
from sage.rings.polynomial.polynomial_ring_constructor import PolynomialRing
from sage.schemes.elliptic_curves.ell_finite_field import EllipticCurve_finite_field
from sage.schemes.elliptic_curves.constructor import EllipticCurve

import tnfs
import tnfs.curve.pairing_friendly_curve
from tnfs.curve.pairing_friendly_curve import get_curve_parameter_b_j0, get_curve_generator_order_r_j0
from tnfs.curve.pairing_friendly_curve import get_curve_parameter_a_j1728, get_curve_generator_order_r_j1728
from tnfs.curve.pairing_friendly_curve import compute_beta_lambda
from tnfs.curve.pairing_friendly_curve import BrezingWeng

#possible embedding degrees
allowed_k = [6,9,12,14,15,18,20,21,22,27,30,33,36,39,42,44,45,51,52,54]

def polynomial_params(k: int, D: int=None, a: int=None, exp_tr: int=None):
    """Returns the parameters px,rx,cx,tx,yx,betax,lambx, and D
    for the Aurifeuillean construction of pairing-friendly curves.
    eprint 2018/193 https://eprint.iacr.org/2018/193
    for some a(x) = a*x^2 where a is a square-free int, the cyclotomic
    polynomial Phi_k(a(x)) factors in two factors of equal degree.
    Set one of the factors to be r(x), then a k-th root of unity
    modulo r(x) is a(x), and we can set t(x) = a(x)^e + 1, where e is
    any integer in [1, k-1] coprime to k.

    INPUT
    k: embedding degree
    D: discriminant (abs)
    a: parameter for Aurifeuillean factorization of Phi_k(a*x^2)
    exp_tr: choice of exponent of the trace t(x) = (a*x^2)^exp_tr + 1 mod r(x)
    m: multiplier of the degree of the cyclotomic polynomial, so that
    r(x) is a factor of Phi_l(a^x^2) where l=k*m (for example to ensure D=3,
    choose l = k if 3|k and l=3*k is 3 does not divide k).

    Examples in https://doi.org/10.1007/s42979-019-0053-5
    """
    QQx = QQ['x']; (x,) = QQx._first_ngens(1)
    Phi_k = QQx(cyclotomic_polynomial(k))
    automorphisms = [] # automorphisms other than identity
    m = 1
    u_m = [0]
    cofactor_r = [1]
    if k==6 and (D is None or D==3):
        # from [Fouotsa Guimagang 2019]
        # Fast hashing to G2 on Aurifeuillean pairing-friendly elliptic curves
        # https://doi.org/10.1007/s42979-019-0053-5
        # SN Computer Science (2020) 1:51
        D = 3
        a = 3
        rx = 3*x**2 + 3*x + 1
        exp_tr = 1
        px = 9*x**4 + 18*x**3 + 18*x**2 + 6*x + 1
        # sigma_x = -3*x**3 - 6*x**2 - 6*x - 2
        sigma_x = 1/(3*x)
        #tau_x = (9*x**3 + 15*x**2 + 13*x + 1)/2
        tau_x = (x+1)/(-3*x-1)
        #psi_x = (-3*x**3 - 3*x**2 - 3*x - 1)/2
        psi_x = 2/(3*x+1) - 1 # (3*x + 1)/(3*(-x - 1))
        automorphisms = [sigma_x, tau_x, psi_x]
        tx = 3*x**2 + 1
        cx = 3*x**2 + 3*x + 1
        yx = 3*x**2 + 4*x + 1
        cxg2 = 3*x**2 + 3*x + 3
        betax = (9*x**3 + 18*x**2 + 15*x + 2)/2 # cube root of unity j^2+j+1 = 0 mod px
        lambx = 3*x+1 # cube root of unity w^2+w+1 = 0 mod rx
    elif k==9 and (D is None or D==3):
        D = 3
        a = -3
        rho = 4/3
        rx = 27*x**6 + 9*x**3 + 1
        lambx = -9*x**3 - 2
        if (exp_tr is None or exp_tr==8):
            exp_tr = 8
            tx = 9*x**4 + 3*x + 1
            px = 81*x**8 - 81*x**7 + 27*x**6 + 27*x**5 - 18*x**4 + 9*x**3 + 3*x**2 + 1
            #sigma_x = 135*x^7 - 189*x^6 + 126*x^5 - 18*x^4 - 12*x^3 + 18*x^2 - 4*x + 3
            sigma_x = (-9*x**3 + 3*x**2 - 2)/(3*(9*x**4 - 6*x**3 + x - 1))
            automorphisms = [sigma_x]
            yx = 9*x**4 - 6*x**3 + x - 1
            cx = 3*x**2 - 3*x + 1
            betax = 162*x**7 - 243*x**6 + 189*x**5 - 54*x**4 - 9*x**3 + 27*x**2 - 9*x + 4
        elif exp_tr==5:
            exp_tr = 5
            tx = -18*x**4 - 3*x + 1
            px = 81*x**8 + 27*x**6 + 27*x**5 - 18*x**4 + 9*x**3 + 3*x**2 - 3*x + 1
            #sigma_x = 54*x^7 - 27*x^6 + 45*x^5 - 3*x^3 + 12*x^2 - 4*x + 1
            sigma_x = (-9*x**3 - 3*x**2 - 1)/(3*(9*x**4 - 3*x**3 + 2*x - 1))
            automorphisms = [sigma_x]
            yx = -6*x**3 + x - 1
            cx = 3*x**2 + 1
            betax = -81*x**7 + 81*x**6 - 54*x**5 + 27*x**4 + 18*x**3 - 18*x**2 + 9*x - 2
        elif exp_tr==2:
            exp_tr = 2
            tx = 9*x**4 + 1
            px = 81*x**8 + 81*x**7 + 27*x**6 + 27*x**5 + 36*x**4 + 9*x**3 + 3*x**2 + 3*x + 1
            #sigma_x = -27*x^7 - 27*x^6 - 9*x^5 - 9*x^4 - 12*x^3 - 3*x^2 - x - 1
            sigma_x = 1/(3*x)
            automorphisms = [sigma_x]
            yx = -9*x**4 - 6*x**3 - 2*x - 1
            cx = 3*x**2 + 3*x + 1
            betax = (81*x**7 + 81*x**6 + 54*x**5 + 54*x**4 + 36*x**3 + 9*x**2 + 9*x + 2)/2
    elif k==12 and D==3:
        if a is None or abs(a)==6:
            D = 3
            a = -6
            rho = 3/2
            rx = 36*x**4 + 36*x**3 + 18*x**2 + 6*x + 1
            exp_tr = 1
            # alternatively, a=6 and exp_tr=7
            tx = -6*x**2 + 1
            px = 1728*x**6 + 2160*x**5 + 1548*x**4 + 756*x**3 + 240*x**2 + 54*x + 7
            sigma_x = x
            yx = -48*x**3 - 30*x**2 - 12*x - 3
            cx = 48*x**2 + 12*x + 7
            betax = 4320*x**5 + 3672*x**4 + 2430*x**3 + 954*x**2 + 237*x + 46
            lambx = -36*x**3 - 18*x**2 - 6*x - 2
        elif abs(a)==2:
            D = 3
            a = -2
            rho = 3/2
            rx = 4*x**4 + 4*x**3 + 2*x**2 + 2*x + 1
            exp_tr = 1
            # alternatively a=2 and exp_tr=7
            tx = -2*x**2 + 1
            px = (64*x**6 + 48*x**5 + 44*x**4 + 52*x**3 + 16*x**2 + 10*x + 7)/3
            m = 3
            u_m = [2]
            cofactor_r = [1]
            sigma_x = x
            yx = (-16*x**3 - 6*x**2 - 4*x - 5)/3
            cx = (16*x**2 - 4*x + 7)/3
            betax = 96*x**5 + 8*x**4 + 66*x**3 + 38*x**2 + x + 16
            lambx = -4*x**3 - 2*x**2 - 2*x - 2
    elif k==12 and D==1:
        if a is None or abs(a)==2:
            D = 1
            a = 2
            rho = 3/2
            rx = 4*x**4 + 4*x**3 + 2*x**2 + 2*x + 1
            exp_tr = 5
            # a=-2 and exp_tr=11 or alternatively, a=2 and exp_tr=5
            tx = -4*x**3 - 2*x**2
            px = 20*x**6 + 12*x**5 + 10*x**4 + 10*x**3 + 3*x**2 + 2*x + 1
            sigma_x = x
            yx = -8*x**3 - 2*x**2 - 2*x - 2
            cx = 5*x**2 - 2*x + 2
            betax = 100*x**5 + 54*x**3 + 24*x**2 + 3*x + 10
            lambx = -4*x**3 - 1
    elif k==14:
        D = 7
        a = 7
        rho = 5/3
        rx = 343*x**6 + 343*x**5 + 147*x**4 + 49*x**3 + 21*x**2 + 7*x + 1
        lambx = -686*x**5 - 343*x**4 - 98*x**3 - 49*x**2 - 21*x - 4
        sigma_x = x
        if exp_tr is None or exp_tr==5:
            exp_tr = 5
            tx = -686*x**5 - 490*x**4 - 147*x**3 - 56*x**2 - 28*x - 5
            px = 184877*x**10 + 235298*x**9 + 151263*x**8 + 76832*x**7 + 39788*x**6 + 17150*x**5 + 5488*x**4 + 1568*x**3 + 448*x**2 + 91*x + 8
            yx = -196*x**5 - 98*x**4 - 35*x**3 - 14*x**2 - 6*x - 1
            cx = 539*x**4 + 147*x**3 + 63*x**2 + 21*x + 14
            betax = (-8319465*x**9 - 8000132*x**8 - 4463459*x**7 - 2417807*x**6 - 1339758*x**5 - 505925*x**4 - 148127*x**3 - 46991*x**2 - 12663*x - 1538)/31
        else:
            exp_tr = 11
            tx = 686*x**5 + 392*x**4 + 98*x**3 + 42*x**2 + 21*x + 5
            px = 184877*x**10 + 201684*x**9 + 108045*x**8 + 52822*x**7 + 27440*x**6 + 11662*x**5 + 3626*x**4 + 1029*x**3 + 308*x**2 + 70*x + 8
            yx = -196*x**5 - 98*x**4 - 28*x**3 - 14*x**2 - 5*x - 1
            cx = 539*x**4 + 49*x**3 + 35*x**2 + 21*x + 4
            betax = (16823807*x**9 + 9664025*x**8 + 4446652*x**7 + 2530654*x**6 + 1282134*x**5 + 457905*x**4 + 121618*x**3 + 41846*x**2 + 11116*x + 1845)/97
    elif k==15 and (D is None or D==3):
        D = 3
        a = -3
        rho = 3/2
        rx = 81*x**8 + 81*x**7 + 54*x**6 + 27*x**5 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        lambx = -27*x**5 - 2
        sigma_x = x
        if exp_tr is None or exp_tr==8:
            exp_tr = 8
            tx = 54*x**6 + 3*x + 1
            px = 729*x**12 + 243*x**10 + 81*x**7 + 54*x**6 + 27*x**5 + 3*x**2 + 3*x + 1
            yx = -18*x**5 - x - 1
            cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
            betax = 729*x**11 - 243*x**10 + 486*x**9 - 162*x**8 + 162*x**7 + 27*x**6 + 54*x**5 + 18*x**4 + 6*x**2 + 3*x + 2
        else:
            exp_tr = 13
            tx = -27*x**6 - 3*x + 1
            px = 729*x**12 + 729*x**11 + 243*x**10 + 81*x**7 + 54*x**6 + 27*x**5 + 3*x**2 + 1
            yx = -27*x**6 - 18*x**5 - x - 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = 243*x**10 + 243*x**9 + 162*x**8 + 81*x**7 + 54*x**6 + 27*x**5 + 9*x**4 + 9*x**3 + 3*x**2 + 3*x
    elif k==18 and (D is None or D==3):
        D = 3
        a = 3
        rho = 5/3
        rx = 27*x**6 + 9*x**3 + 1
        lambx = -9*x**3 - 2
        sigma_x = x
        if (exp_tr is None or exp_tr==1):
            # construction from the paper [Scott Guillevic Waifi 18]
            exp_tr = 1
            tx = 3*x**2 + 1
            px = 243*x**10 - 162*x**8 + 81*x**7 + 27*x**6 - 54*x**5 + 9*x**4 + 9*x**3 - 3*x**2 + 1
            yx = 18*x**5 - 6*x**3 + 3*x**2 - 1
            cx = 9*x**4 - 6*x**2 + 1
            betax = (-486*x**9 - 243*x**8 + 486*x**7 + 81*x**6 - 297*x**5 + 54*x**4 + 72*x**3 - 45*x**2 - 6*x + 4)/7
        elif exp_tr==7:
            tx = -27*x**5 - 6*x**2 + 1
            px = 243*x**10 + 81*x**8 + 81*x**7 + 27*x**6 + 9*x**4 + 9*x**3 - 3*x**2 + 1
            yx = -9*x**5 - 6*x**3 - 1
            cx = 9*x**4 + 3*x**2 + 1
            betax = (1215*x**9 - 729*x**8 + 972*x**7 + 81*x**6 + 216*x**5 + 117*x**3 + 18*x**2 - 21*x + 11)/8
        elif exp_tr==13:
            tx = 27*x**5 + 3*x**2 + 1
            px = 243*x**10 + 81*x**8 + 81*x**7 + 27*x**6 + 54*x**5 + 9*x**4 + 9*x**3 + 6*x**2 + 1
            yx = -9*x**5 - 6*x**3 - 3*x**2 - 1
            cx = 9*x**4 + 3*x**2 + 1
            betax = -486*x**9 + 243*x**8 - 243*x**7 - 54*x**5 - 54*x**4 + 18*x**3 - 18*x**2 + 3*x - 2
    elif k==20:
        a = 2
        rho = 7/4
        rx = 16*x**8 + 16*x**7 + 8*x**6 - 4*x**4 + 2*x**2 + 2*x + 1
        sigma_x = x
        if (D is None) or (D==1):
            D = 1
            lambx = -8*x**5 - 1
            if (exp_tr is None) or (exp_tr == 19): #(a==-2 and exp_tr==9) or (a==2 and exp_tr==19)
                exp_tr = 19
                tx = 16*x**7 + 8*x**6 - 4*x**4 - 4*x**3 + 2*x**2 + 2*x + 2
                px = 128*x**14 + 128*x**13 - 32*x**12 - 96*x**11 - 48*x**10 + 32*x**9 + 56*x**8 + 32*x**7 - 4*x**6 - 12*x**5 - 6*x**4 + 4*x**2 + 2*x + 1
                yx = 16*x**7 + 8*x**6 - 8*x**5 - 4*x**4 + 2*x**2 + 2*x
                cx = 8*x**6 - 6*x**4 + 2*x**2
                betax = 128*x**12 + 128*x**11 - 32*x**10 - 96*x**9 - 48*x**8 + 24*x**6 + 24*x**5 + 4*x**4 - 4*x**3 - 6*x**2 - 4*x - 1
            else: # (a==-2 and exp_tr==19) or (a==2 and exp_tr==9)
                exp_tr = 9
                tx = -16*x**7 - 8*x**6 + 4*x**4 + 4*x**3 - 2*x**2 - 2*x
                px = 128*x**14 + 128*x**13 + 96*x**12 - 32*x**11 - 48*x**10 + 56*x**8 + 48*x**7 + 12*x**6 - 4*x**5 - 6*x**4 + 4*x**3 + 4*x**2 + 2*x + 1
                yx = -16*x**7 - 8*x**6 - 8*x**5 + 4*x**4 - 2*x**2 - 2*x - 2
                cx = 8*x**6 + 2*x**4 - 4*x**3 + 2*x**2 + 2
                betax = (2816*x**13 + 1152*x**12 + 1728*x**11 - 1824*x**10 - 448*x**9 - 304*x**8 + 1424*x**7 + 536*x**6 + 176*x**5 - 260*x**4 - 136*x**3 + 122*x**2 + 36*x + 49)/17
        elif D==5:
            lambx = -32*x**7 - 16*x**6 - 8*x**5 + 8*x**4 + 8*x**3 - 4*x - 3
            # if (a is None) or (exp_tr is None) or (a==-2 and exp_tr==19) or (a==2 and exp_tr==9):
            exp_tr = 9
            # or: a=-2 and exp_tr = 19
            tx = -16*x**7 - 8*x**6 + 4*x**4 + 4*x**3 - 2*x**2 - 2*x
            px = (896*x**14 + 512*x**13 + 288*x**12 - 416*x**11 - 464*x**10 - 32*x**9 + 200*x**8 + 192*x**7 + 20*x**6 - 52*x**5 - 34*x**4 + 4*x**3 + 8*x**2 + 2*x + 1)/5
            m = 5
            u_m = [2,3,4]
            cofactor_r = [5,1,5]
            yx = (-48*x**7 - 8*x**6 - 8*x**5 + 12*x**4 + 8*x**3 - 2*x**2 - 2*x - 2)/5
            cx = (56*x**6 - 24*x**5 + 14*x**4 - 28*x**3 + 6*x**2 + 6)/5
            betax = (87808*x**13 + 43904*x**12 + 49728*x**11 - 30240*x**10 - 28352*x**9 - 12048*x**8 + 11472*x**7 + 12088*x**6 + 3328*x**5 - 1908*x**4 - 2080*x**3 + 462*x**2 + 256*x + 107)/55
    elif k==21 and (D is None or D==3):
        D = 3
        a = -3
        rho = 4/3
        rx = 729*x**12 + 729*x**11 + 486*x**10 + 243*x**9 + 81*x**8 - 27*x**6 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        lambx = -81*x**7 - 2
        if exp_tr is None or exp_tr==11:
            exp_tr = 11
            tx = -162*x**8 - 3*x + 1
            px = 6561*x**16 + 2187*x**14 + 243*x**9 - 162*x**8 + 81*x**7 + 3*x**2 - 3*x + 1
            sigma_x = x
            yx = -54*x**7 + x - 1
            cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
            betax = -6561*x**15 + 6561*x**14 - 4374*x**13 + 4374*x**12 - 1458*x**11 + 1458*x**10 - 486*x**9 + 243*x**8 + 162*x**7 - 162*x**6 + 108*x**5 - 54*x**4 + 36*x**3 - 18*x**2 + 9*x - 2
        else:
            exp_tr = 4
            tx = 81*x**8 + 1
            px = 6561*x**16 + 6561*x**15 + 2187*x**14 + 243*x**9 + 324*x**8 + 81*x**7 + 3*x**2 + 3*x + 1
            #sigma_x = -2187*x^15 - 2187*x^14 - 729*x^13 - 81*x^8 - 108*x^7 - 27*x^6 - x - 1
            sigma_x = 1/(3*x)
            automorphisms = [sigma_x]
            yx = -81*x**8 - 54*x**7 - 2*x - 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = (6561*x**15 + 6561*x**14 + 4374*x**13 + 2187*x**12 + 1458*x**11 + 729*x**10 + 486*x**9 + 486*x**8 + 324*x**7 + 81*x**6 + 54*x**5 + 27*x**4 + 18*x**3 + 9*x**2 + 9*x + 2)/2
    elif k==22 and (D is None or D==11):
        D = 11
        a = 11
        rho = 9/5
        rx = 161051*x**10 + 161051*x**9 + 73205*x**8 + 14641*x**7 - 1331*x**6 - 1331*x**5 - 121*x**4 + 121*x**3 + 55*x**2 + 11*x + 1
        exp_tr = 1
        tx = 11*x**2 + 1
        px = 2357947691*x**18 - 1286153286*x**16 - 428717762*x**15 + 175384539*x**14 + 155897368*x**13 + 26573415*x**12 - 12400927*x**11 - 6442040*x**10 - 322102*x**9 + 585640*x**8 + 190333*x**7 + 5324*x**6 - 10648*x**5 - 2420*x**4 + 121*x**3 + 165*x**2 + 33*x + 3
        sigma_x = x
        yx = -29282*x**9 + 7986*x**7 + 2662*x**6 - 242*x**4 - 44*x**3 + 11*x**2 + 6*x + 1
        cx = 14641*x**8 - 14641*x**7 + 2662*x**5 - 121*x**4 - 121*x**3 - 11*x**2 + 3
        betax = (-2357947691*x**17 - 4715895382*x**16 + 1500512167*x**15 + 3429742096*x**14 + 545640788*x**13 - 818461182*x**12 - 387971859*x**11 + 33659659*x**10 + 66514063*x**9 + 10146213*x**8 - 5329324*x**7 - 2283996*x**6 - 81191*x**5 + 147741*x**4 + 31097*x**3 - 3267*x**2 - 2244*x - 336)/45
        lambx = -483153*x**9 - 322102*x**8 - 87846*x**7 + 6655*x**5 + 1331*x**4 - 363*x**3 - 242*x**2 - 55*x - 6
    elif k==27 and (D is None or D==3):
        D = 3
        a = -3
        rho = 11/9
        rx = 19683*x**18 + 243*x**9 + 1
        lambx = -243*x**9 - 2
        sigma_x = x
        if exp_tr is None or exp_tr==1:
            exp_tr = 1
            tx = -3*x**2 + 1
            px = 177147*x**22 + 118098*x**20 + 19683*x**18 + 2187*x**13 + 1458*x**11 + 243*x**9 + 9*x**4 + 3*x**2 + 1
            yx = -486*x**11 - 162*x**9 - 3*x**2 - 1
            cx = 9*x**4 + 6*x**2 + 1
            betax = 354294*x**21 - 177147*x**20 + 354294*x**19 - 177147*x**18 + 157464*x**17 - 78732*x**16 + 52488*x**15 - 26244*x**14 + 17496*x**13 - 4374*x**12 + 3645*x**11 + 1458*x**10 - 486*x**9 + 972*x**8 - 486*x**7 + 324*x**6 - 162*x**5 + 108*x**4 - 36*x**3 + 27*x**2 - 6*x + 4
        elif exp_tr==10:
            tx = -729*x**11 - 3*x**2 + 1
            px = 177147*x**22 - 59049*x**20 + 19683*x**18 + 2187*x**13 - 1458*x**11 + 243*x**9 + 9*x**4 - 6*x**2 + 1
            yx = 243*x**11 - 162*x**9 + 3*x**2 - 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = (885735*x**21 - 177147*x**20 - 177147*x**19 + 118098*x**18 + 157464*x**17 - 59049*x**16 - 6561*x**15 + 19683*x**14 + 17496*x**13 + 4374*x**12 - 2916*x**11 - 3645*x**10 + 2430*x**9 + 729*x**8 - 486*x**7 - 243*x**6 + 162*x**5 + 81*x**4 - 9*x**3 - 36*x**2 - 6*x + 4)/7
        elif exp_tr==19:
            tx = 729*x**11 + 6*x**2 + 1
            px = 177147*x**22 - 59049*x**20 + 19683*x**18 + 2187*x**13 + 243*x**9 + 9*x**4 + 3*x**2 + 1
            yx = 243*x**11 - 162*x**9 - 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = (177147*x**21 + 177147*x**20 - 354294*x**19 + 118098*x**18 + 137781*x**17 - 19683*x**16 - 72171*x**15 + 32805*x**14 + 15309*x**13 - 5832*x**11 + 1944*x**9 + 243*x**8 + 243*x**7 - 405*x**6 + 243*x**5 + 27*x**4 + 36*x**3 - 36*x**2 + 15*x - 1)/8
    elif k==30:
        a = 3
        rho = 3/2
        rx = 81*x**8 + 81*x**7 + 54*x**6 + 27*x**5 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        sigma_x = x
        if (D is None) or (D==3):
            lambx = -27*x**5 - 2
            if (exp_tr is None) or exp_tr==13:
                exp_tr = 13
                tx = 27*x**6 + 3*x + 1
                px = 729*x**12 - 729*x**11 + 243*x**10 + 81*x**7 - 54*x**6 + 27*x**5 + 3*x**2 + 1
                yx = 27*x**6 - 18*x**5 + x - 1
                cx = 9*x**4 - 18*x**3 + 15*x**2 - 6*x + 1
                betax = 1458*x**11 - 2187*x**10 + 1701*x**9 - 972*x**8 + 567*x**7 - 162*x**6 - 27*x**5 + 81*x**4 - 45*x**3 + 27*x**2 - 9*x + 4
            else:
                exp_tr = 23
                tx = -54*x**6 - 3*x + 1
                px = 729*x**12 + 243*x**10 + 81*x**7 - 54*x**6 + 27*x**5 + 3*x**2 - 3*x + 1
                yx = -18*x**5 + x - 1
                cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
                betax = -729*x**11 + 729*x**10 - 486*x**9 + 486*x**8 - 162*x**7 + 81*x**6 + 54*x**5 - 54*x**4 + 36*x**3 - 18*x**2 + 9*x - 2
    elif k==33:
        D = 3
        a = -3
        rho = 6/5
        rx = 59049*x**20 + 59049*x**19 + 39366*x**18 + 19683*x**17 + 6561*x**16 - 2187*x**14 - 2187*x**13 - 1458*x**12 - 729*x**11 - 243*x**10 - 243*x**9 - 162*x**8 - 81*x**7 - 27*x**6 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        lambx = -729*x**11 + 1
        sigma_x = x
        if (exp_tr is None) or (exp_tr==17):
            exp_tr = 17
            tx = -1458*x**12 + 3*x + 1
            px = 531441*x**24 + 177147*x**22 - 2187*x**13 - 1458*x**12 - 729*x**11 + 3*x**2 + 3*x + 1
            yx = -486*x**11 + x + 1
            cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
            betax = -531441*x**23 - 531441*x**22 - 354294*x**21 - 354294*x**20 - 118098*x**19 - 118098*x**18 - 39366*x**17 - 39366*x**16 - 13122*x**15 - 13122*x**14 - 4374*x**13 - 2187*x**12 + 1458*x**11 + 1458*x**10 + 972*x**9 + 486*x**8 + 324*x**7 + 162*x**6 + 108*x**5 + 54*x**4 + 36*x**3 + 18*x**2 + 9*x + 1
        else:
            exp_tr = 28
            tx = 729*x**12 - 3*x + 1
            px = 531441*x**24 + 531441*x**23 + 177147*x**22 - 2187*x**13 - 1458*x**12 - 729*x**11 + 3*x**2 + 1
            yx = -729*x**12 - 486*x**11 + x + 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = 1062882*x**23 + 1594323*x**22 + 1240029*x**21 + 708588*x**20 + 413343*x**19 + 236196*x**18 + 137781*x**17 + 78732*x**16 + 45927*x**15 + 26244*x**14 + 15309*x**13 + 4374*x**12 - 729*x**11 - 2187*x**10 - 1215*x**9 - 729*x**8 - 405*x**7 - 243*x**6 - 135*x**5 - 81*x**4 - 45*x**3 - 27*x**2 - 9*x - 5
    elif k==36:
        D = 3
        rho = 11/6
        sigma_x = x
        if (a is None) or (a==2):
            a = 2
            rx = 64*x**12 + 32*x**9 + 8*x**6 + 4*x**3 + 1
            exp_tr = 1
            tx = 2*x**2 + 1
            px = (4096*x**22 - 4096*x**20 + 2048*x**19 + 1024*x**18 - 2048*x**17 + 1280*x**16 + 512*x**15 - 1280*x**14 + 640*x**13 + 320*x**12 - 640*x**11 + 160*x**10 + 160*x**9 - 160*x**8 + 48*x**7 + 40*x**6 - 48*x**5 + 12*x**4 + 12*x**3 - 6*x**2 + 3)/3
            m = 3
            u_m = [0]
            cofactor_r = [1]
            yx = (128*x**11 - 64*x**9 + 32*x**8 - 16*x**6 + 16*x**5 - 8*x**3 + 6*x**2 - 3)/3
            cx = (64*x**10 - 64*x**8 + 16*x**6 + 12*x**4 - 12*x**2 + 3)/3
            betax = -2048*x**20 + 3072*x**18 - 1024*x**17 - 2048*x**16 + 1536*x**15 + 384*x**14 - 1024*x**13 + 448*x**12 + 192*x**11 - 384*x**10 + 192*x**9 + 112*x**8 - 160*x**7 + 16*x**6 + 56*x**5 - 24*x**4 - 8*x**3 + 6*x**2 - 2
            lambx = -32*x**9 - 8*x**6 - 4*x**3 - 2
        elif (a==-6):
            a = -6
            rx = 46656*x**12 + 7776*x**9 + 648*x**6 + 36*x**3 + 1
            exp_tr = 1
            tx = -6*x**2 + 1
            px = 725594112*x**22 + 241864704*x**20 + 120932352*x**19 + 20155392*x**18 + 40310784*x**17 + 11757312*x**16 + 3359232*x**15 + 3919104*x**14 + 839808*x**13 + 326592*x**12 + 279936*x**11 + 38880*x**10 + 23328*x**9 + 12960*x**8 + 1296*x**7 + 1080*x**6 + 432*x**5 + 36*x**4 + 36*x**3 + 6*x**2 + 1
            yx = -31104*x**11 - 5184*x**9 - 2592*x**8 - 432*x**6 - 144*x**5 - 24*x**3 - 6*x**2 - 1
            cx = 15552*x**10 + 5184*x**8 + 432*x**6 + 36*x**4 + 12*x**2 + 1
            betax = (2902376448*x**21 - 1088391168*x**20 + 1451188224*x**19 - 60466176*x**18 + 141087744*x**17 + 120932352*x**16 + 10077696*x**15 + 15956352*x**14 + 12317184*x**13 + 139968*x**12 + 2099520*x**11 + 653184*x**10 + 46656*x**9 + 143856*x**8 + 18144*x**7 + 6480*x**6 + 5400*x**5 + 648*x**4 + 216*x**3 + 198*x**2 - 24*x + 14)/5
            lambx = -7776*x**9 - 648*x**6 - 36*x**3 - 2
    elif k==39:
        D = 3
        a = -3
        rho = 7/6
        rx = 531441*x**24 + 531441*x**23 + 354294*x**22 + 177147*x**21 + 59049*x**20 - 19683*x**18 - 19683*x**17 - 13122*x**16 - 6561*x**15 - 2187*x**14 + 729*x**12 - 243*x**10 - 243*x**9 - 162*x**8 - 81*x**7 - 27*x**6 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        exp_tr = 20
        tx = 4374*x**14 - 3*x + 1
        px = 4782969*x**28 + 1594323*x**26 - 6561*x**15 + 4374*x**14 - 2187*x**13 + 3*x**2 - 3*x + 1
        sigma_x = x
        yx = -1458*x**13 - x + 1
        cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
        betax = 4782969*x**27 + 1594323*x**26 + 3188646*x**25 + 1062882*x**24 + 1062882*x**23 + 354294*x**22 + 354294*x**21 + 118098*x**20 + 118098*x**19 + 39366*x**18 + 39366*x**17 + 13122*x**16 + 13122*x**15 - 2187*x**14 + 4374*x**13 - 1458*x**12 - 486*x**10 - 162*x**8 - 54*x**6 - 18*x**4 - 6*x**2 + 3*x - 3
        lambx = -2187*x**13 + 1
    elif k==42:
        D = 3
        a = 3
        rho = 4/3
        rx = 729*x**12 + 729*x**11 + 486*x**10 + 243*x**9 + 81*x**8 - 27*x**6 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        exp_tr = 11
        tx = 162*x**8 + 3*x + 1
        px = 6561*x**16 + 2187*x**14 + 243*x**9 + 162*x**8 + 81*x**7 + 3*x**2 + 3*x + 1
        sigma_x = x
        yx = -54*x**7 - x - 1
        cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
        betax = 6561*x**15 - 2187*x**14 + 4374*x**13 - 1458*x**12 + 1458*x**11 - 486*x**10 + 486*x**9 + 81*x**8 + 162*x**7 + 54*x**6 + 18*x**4 + 6*x**2 + 3*x + 2
        lambx = -81*x**7 - 2
    elif k==44:
        D = 11
        a = 2
        rho = 9/5
        rx = 1024*x**20 + 1024*x**19 + 512*x**18 - 256*x**16 - 256*x**15 - 128*x**14 + 64*x**12 + 64*x**11 + 32*x**10 + 32*x**9 + 16*x**8 - 8*x**6 - 8*x**5 - 4*x**4 + 2*x**2 + 2*x + 1
        exp_tr = 3
        tx = 8*x**6 + 1
        px = (262144*x**36 + 262144*x**34 - 262144*x**33 - 65536*x**32 - 131072*x**31 - 65536*x**30 + 131072*x**29 + 16384*x**28 + 98304*x**27 - 16384*x**25 - 24576*x**24 - 16384*x**23 - 10240*x**22 - 2048*x**21 + 2048*x**20 + 4096*x**19 + 7168*x**18 + 512*x**17 + 1536*x**16 - 1536*x**15 - 1408*x**14 - 768*x**13 - 256*x**12 + 192*x**11 + 160*x**10 + 128*x**9 + 64*x**8 + 64*x**7 + 48*x**6 - 24*x**4 - 12*x**3 + 5)/11
        m = 11
        u_m = [6]
        cofactor_r = [1]
        sigma_x = x
        yx = (-1024*x**18 - 512*x**16 + 512*x**15 + 256*x**14 + 128*x**12 - 128*x**11 - 64*x**10 - 64*x**9 + 8*x**6 + 16*x**4 + 8*x**3 - 3)/11
        cx = (256*x**16 - 256*x**15 + 384*x**14 - 512*x**13 + 320*x**12 - 192*x**11 + 32*x**10 + 128*x**9 - 144*x**8 + 144*x**7 - 88*x**6 + 24*x**5 - 12*x**3 + 10*x**2 - 10*x + 5)/11
        betax = (3407872*x**35 + 3801088*x**34 - 4194304*x**33 + 1441792*x**32 - 12582912*x**31 + 6651904*x**30 - 2654208*x**29 + 4800512*x**28 + 3440640*x**27 - 2727936*x**26 + 2801664*x**25 - 4157440*x**24 + 475136*x**23 - 776192*x**22 + 92160*x**21 + 563200*x**20 - 132096*x**19 + 580096*x**18 - 2560*x**17 + 73984*x**16 - 183296*x**15 - 54272*x**14 - 65280*x**13 - 15936*x**12 + 19904*x**11 + 21440*x**10 + 20544*x**9 - 3136*x**8 + 5376*x**7 - 2576*x**6 + 376*x**5 - 2156*x**4 - 2588*x**3 + 160*x**2 - 50*x + 397)/297
        lambx = -1024*x**19 - 512*x**18 + 256*x**15 + 256*x**14 - 64*x**11 - 32*x**10 - 32*x**9 - 16*x**8 + 8*x**6 + 8*x**5 + 8*x**4 + 4*x**3 - 2*x**2 - 2*x - 2
    elif k==45:
        D = 3
        a = -3
        rho = 4/3
        rx = 531441*x**24 + 177147*x**21 + 39366*x**18 + 6561*x**15 + 729*x**12 + 243*x**9 + 54*x**6 + 9*x**3 + 1
        lambx = -6561*x**15 - 2
        if (exp_tr is None) or (exp_tr==23):
            exp_tr = 23
            tx = -13122*x**16 - 3*x + 1
            px = 43046721*x**32 + 14348907*x**30 + 19683*x**17 - 13122*x**16 + 6561*x**15 + 3*x**2 - 3*x + 1
            #sigma_x = 28697814*x^31 - 14348907*x^30 + 23914845*x^29 - 9565938*x^28 + 9565938*x^27 - 3188646*x^26 + 3188646*x^25 - 1062882*x^24 + 1062882*x^23 - 354294*x^22 + 354294*x^21 - 118098*x^20 + 118098*x^19 - 39366*x^18 + 39366*x^17 - 2187*x^15 + 8748*x^14 - 4374*x^13 + 2916*x^12 - 1458*x^11 + 972*x^10 - 486*x^9 + 324*x^8 - 162*x^7 + 108*x^6 - 54*x^5 + 36*x^4 - 18*x^3 + 12*x^2 - 4*x + 1
            sigma_x = (-6561*x**15 - 2187*x**14 - 1)/(3*(6561*x**16 - 2187*x**15 + 2*x - 1))
            automorphisms = [sigma_x]
            yx = -4374*x**15 + x - 1
            cx = 81*x**8 + 27*x**6 - 27*x**5 - 9*x**3 + 3*x**2 + 1
            betax = -43046721*x**31 + 43046721*x**30 - 28697814*x**29 + 28697814*x**28 - 9565938*x**27 + 9565938*x**26 - 3188646*x**25 + 3188646*x**24 - 1062882*x**23 + 1062882*x**22 - 354294*x**21 + 354294*x**20 - 118098*x**19 + 118098*x**18 - 39366*x**17 + 19683*x**16 + 13122*x**15 - 13122*x**14 + 8748*x**13 - 4374*x**12 + 2916*x**11 - 1458*x**10 + 972*x**9 - 486*x**8 + 324*x**7 - 162*x**6 + 108*x**5 - 54*x**4 + 36*x**3 - 18*x**2 + 9*x - 2
        elif exp_tr==8:
            exp_tr = 8
            tx = 6561*x**16 + 1
            px = 43046721*x**32 + 43046721*x**31 + 14348907*x**30 + 19683*x**17 + 26244*x**16 + 6561*x**15 + 3*x**2 + 3*x + 1
            #sigma_x = -14348907*x**31 - 14348907*x**30 - 4782969*x**29 - 6561*x**16 - 8748*x**15 - 2187*x**14 - x - 1
            sigma_x = 1/(3*x)
            automorphisms = [sigma_x]
            yx = -6561*x**16 - 4374*x**15 - 2*x - 1
            cx = 81*x**8 + 81*x**7 + 27*x**6 - 27*x**5 - 27*x**4 - 9*x**3 + 3*x**2 + 3*x + 1
            betax = (43046721*x**31 + 43046721*x**30 + 28697814*x**29 + 14348907*x**28 + 9565938*x**27 + 4782969*x**26 + 3188646*x**25 + 1594323*x**24 + 1062882*x**23 + 531441*x**22 + 354294*x**21 + 177147*x**20 + 118098*x**19 + 59049*x**18 + 39366*x**17 + 39366*x**16 + 26244*x**15 + 6561*x**14 + 4374*x**13 + 2187*x**12 + 1458*x**11 + 729*x**10 + 486*x**9 + 243*x**8 + 162*x**7 + 81*x**6 + 54*x**5 + 27*x**4 + 18*x**3 + 9*x**2 + 9*x + 2)/2
        else:
            exp_tr = 38
            tx = 6561*x**16 + 3*x + 1
            px = 43046721*x**32 - 43046721*x**31 + 14348907*x**30 + 19683*x**17 - 13122*x**16 + 6561*x**15 + 3*x**2 + 1
            #sigma_x = 71744535*x^31 - 100442349*x^30 + 66961566*x^29 - 33480783*x^28 + 19131876*x^27 - 11160261*x^26 + 6377292*x^25 - 3720087*x^24 + 2125764*x^23 - 1240029*x^22 + 708588*x^21 - 413343*x^20 + 236196*x^19 - 137781*x^18 + 78732*x^17 - 13122*x^16 - 8748*x^15 + 13122*x^14 - 6561*x^13 + 3645*x^12 - 2187*x^11 + 1215*x^10 - 729*x^9 + 405*x^8 - 243*x^7 + 135*x^6 - 81*x^5 + 45*x^4 - 27*x^3 + 15*x^2 - 4*x + 3
            sigma_x = (-6561*x**15 + 2187*x**14 - 2)/(3*(6561*x**16 - 4374*x**15 + x - 1))
            automorphisms = [sigma_x]
            yx = 6561*x**16 - 4374*x**15 + x - 1
            cx = 81*x**8 - 81*x**7 + 27*x**6 - 27*x**5 + 27*x**4 - 9*x**3 + 3*x**2 - 3*x + 1
            betax = 86093442*x**31 - 129140163*x**30 + 100442349*x**29 - 57395628*x**28 + 33480783*x**27 - 19131876*x**26 + 11160261*x**25 - 6377292*x**24 + 3720087*x**23 - 2125764*x**22 + 1240029*x**21 - 708588*x**20 + 413343*x**19 - 236196*x**18 + 137781*x**17 - 39366*x**16 - 6561*x**15 + 19683*x**14 - 10935*x**13 + 6561*x**12 - 3645*x**11 + 2187*x**10 - 1215*x**9 + 729*x**8 - 405*x**7 + 243*x**6 - 135*x**5 + 81*x**4 - 45*x**3 + 27*x**2 - 9*x + 4
    elif k==51:
        D = 3
        a = -3
        rho = 9/8
        rx = 43046721*x**32 + 43046721*x**31 + 28697814*x**30 + 14348907*x**29 + 4782969*x**28 - 1594323*x**26 - 1594323*x**25 - 1062882*x**24 - 531441*x**23 - 177147*x**22 + 59049*x**20 + 59049*x**19 + 39366*x**18 + 19683*x**17 + 6561*x**16 + 6561*x**15 + 4374*x**14 + 2187*x**13 + 729*x**12 - 243*x**10 - 243*x**9 - 162*x**8 - 81*x**7 - 27*x**6 + 9*x**4 + 9*x**3 + 6*x**2 + 3*x + 1
        sigma_x = x
        lambx = -19683*x**17 - 2
        if (exp_tr is None) or (exp_tr==26): 
            exp_tr = 26
            tx = 39366*x**18 + 3*x + 1
            px = 387420489*x**36 + 129140163*x**34 + 59049*x**19 + 39366*x**18 + 19683*x**17 + 3*x**2 + 3*x + 1
            yx = -13122*x**17 - x - 1
            cx = 9*x**4 - 9*x**3 + 6*x**2 - 3*x + 1
            betax = 387420489*x**35 - 129140163*x**34 + 258280326*x**33 - 86093442*x**32 + 86093442*x**31 - 28697814*x**30 + 28697814*x**29 - 9565938*x**28 + 9565938*x**27 - 3188646*x**26 + 3188646*x**25 - 1062882*x**24 + 1062882*x**23 - 354294*x**22 + 354294*x**21 - 118098*x**20 + 118098*x**19 + 19683*x**18 + 39366*x**17 + 13122*x**16 + 4374*x**14 + 1458*x**12 + 486*x**10 + 162*x**8 + 54*x**6 + 18*x**4 + 6*x**2 + 3*x + 2
        else:
            exp_tr = 43
            tx = -19683*x**18 - 3*x + 1
            px = 387420489*x**36 + 387420489*x**35 + 129140163*x**34 + 59049*x**19 + 39366*x**18 + 19683*x**17 + 3*x**2 + 1
            yx = -19683*x**18 - 13122*x**17 - x - 1
            cx = 9*x**4 - 3*x**2 + 1
            betax = 129140163*x**34 + 129140163*x**33 + 86093442*x**32 + 43046721*x**31 + 28697814*x**30 + 14348907*x**29 + 9565938*x**28 + 4782969*x**27 + 3188646*x**26 + 1594323*x**25 + 1062882*x**24 + 531441*x**23 + 354294*x**22 + 177147*x**21 + 118098*x**20 + 59049*x**19 + 39366*x**18 + 19683*x**17 + 6561*x**16 + 6561*x**15 + 2187*x**14 + 2187*x**13 + 729*x**12 + 729*x**11 + 243*x**10 + 243*x**9 + 81*x**8 + 81*x**7 + 27*x**6 + 27*x**5 + 9*x**4 + 9*x**3 + 3*x**2 + 3*x
    elif k==52:
        if (D is None) or (D==1):
            D = 1
            a = 2 #a=2 and exp_tr=51 or (a=-2 and exp_tr=25)
            rho = 23/12
            rx = 4096*x**24 + 4096*x**23 + 2048*x**22 - 1024*x**20 - 1024*x**19 - 512*x**18 + 256*x**16 + 256*x**15 + 128*x**14 - 64*x**12 + 32*x**10 + 32*x**9 + 16*x**8 - 8*x**6 - 8*x**5 - 4*x**4 + 2*x**2 + 2*x + 1
            sigma_x = x
            exp_tr = 51
            tx = 4096*x**23 + 2048*x**22 - 1024*x**20 - 1024*x**19 - 512*x**18 + 256*x**16 + 256*x**15 + 128*x**14 - 64*x**12 - 64*x**11 + 32*x**10 + 32*x**9 + 16*x**8 - 8*x**6 - 8*x**5 - 4*x**4 + 2*x**2 + 2*x + 2
            px = 8388608*x**46 + 8388608*x**45 + 2097152*x**44 - 4194304*x**43 - 6291456*x**42 - 4194304*x**41 - 524288*x**40 + 2097152*x**39 + 2621440*x**38 + 1572864*x**37 - 131072*x**36 - 917504*x**35 - 786432*x**34 - 131072*x**33 + 294912*x**32 + 327680*x**31 + 131072*x**30 - 65536*x**29 - 139264*x**28 - 98304*x**27 - 12288*x**26 + 40960*x**25 + 47104*x**24 + 24576*x**23 - 1024*x**22 - 12288*x**21 - 9728*x**20 - 3072*x**19 + 1536*x**18 + 2560*x**17 + 1408*x**16 - 640*x**14 - 448*x**13 - 96*x**12 + 128*x**11 + 192*x**10 + 96*x**9 + 8*x**8 - 32*x**7 - 32*x**6 - 16*x**5 - 2*x**4 + 4*x**3 + 4*x**2 + 2*x + 1
            yx = 4096*x**23 + 2048*x**22 - 1024*x**20 - 1024*x**19 - 512*x**18 + 256*x**16 + 256*x**15 + 128*x**14 - 128*x**13 - 64*x**12 + 32*x**10 + 32*x**9 + 16*x**8 - 8*x**6 - 8*x**5 - 4*x**4 + 2*x**2 + 2*x
            cx = 2048*x**22 - 512*x**20 - 512*x**19 - 256*x**18 + 128*x**16 + 128*x**15 + 64*x**14 - 96*x**12 + 16*x**10 + 16*x**9 + 8*x**8 - 4*x**6 - 4*x**5 - 2*x**4 + 2*x**2
            betax = (50331648*x**45 + 260046848*x**44 + 272629760*x**43 + 27262976*x**42 - 260046848*x**41 - 350224384*x**40 - 205520896*x**39 + 39321600*x**38 + 203948032*x**37 + 211812352*x**36 + 96206848*x**35 - 40763392*x**34 - 102105088*x**33 - 81526784*x**32 - 22347776*x**31 + 23298048*x**30 + 34373632*x**29 + 20086784*x**28 + 917504*x**27 - 9379840*x**26 - 8724480*x**25 - 2838528*x**24 + 1724416*x**23 + 2930688*x**22 + 1697792*x**21 + 37888*x**20 - 826368*x**19 - 763392*x**18 - 290816*x**17 + 99840*x**16 + 226048*x**15 + 158848*x**14 + 47616*x**13 - 26496*x**12 - 41536*x**11 - 26144*x**10 - 7424*x**9 + 3040*x**8 + 4944*x**7 + 3048*x**6 + 976*x**5 - 80*x**4 - 304*x**3 - 230*x**2 - 118*x - 25)/31
            lambx = -128*x**13 - 1
    elif k==54:
        D = 3
        a = 3
        rho = 10/9
        rx = 19683*x**18 + 243*x**9 + 1
        lambx = -243*x**9 - 2
        if (exp_tr is None) or (exp_tr==41):
            exp_tr = 41
            tx = -486*x**10 - 3*x + 1
            px = 59049*x**20 + 19683*x**18 + 729*x**11 - 486*x**10 + 243*x**9 + 3*x**2 - 3*x + 1
            #sigma_x = 39366*x^19 - 19683*x^18 + 32805*x^17 - 13122*x^16 + 13122*x^15 - 4374*x^14 + 4374*x^13 - 1458*x^12 + 1458*x^11 - 81*x^9 + 324*x^8 - 162*x^7 + 108*x^6 - 54*x^5 + 36*x^4 - 18*x^3 + 12*x^2 - 4*x + 1
            sigma_x = (-243*x**9 - 81*x**8 - 1)/(3*(243*x**10 - 81*x**9 + 2*x - 1))
            automorphisms = [sigma_x]
            yx = -162*x**9 + x - 1
            cx = 3*x**2 + 1
            betax = -59049*x**19 + 59049*x**18 - 39366*x**17 + 39366*x**16 - 13122*x**15 + 13122*x**14 - 4374*x**13 + 4374*x**12 - 1458*x**11 + 729*x**10 + 486*x**9 - 486*x**8 + 324*x**7 - 162*x**6 + 108*x**5 - 54*x**4 + 36*x**3 - 18*x**2 + 9*x - 2
        elif exp_tr==5:
            exp_tr = 5
            tx = 243*x**10 + 1
            px = 59049*x**20 + 59049*x**19 + 19683*x**18 + 729*x**11 + 972*x**10 + 243*x**9 + 3*x**2 + 3*x + 1
            #sigma_x = -19683*x^19 - 19683*x^18 - 6561*x^17 - 243*x^10 - 324*x^9 - 81*x^8 - x - 1
            sigma_x = 1/(3*x)
            automorphisms = [sigma_x]
            yx = -243*x**10 - 162*x**9 - 2*x - 1
            cx = 3*x**2 + 3*x + 1
            betax = (59049*x**19 + 59049*x**18 + 39366*x**17 + 19683*x**16 + 13122*x**15 + 6561*x**14 + 4374*x**13 + 2187*x**12 + 1458*x**11 + 1458*x**10 + 972*x**9 + 243*x**8 + 162*x**7 + 81*x**6 + 54*x**5 + 27*x**4 + 18*x**3 + 9*x**2 + 9*x + 2)/2
        else:
            exp_tr = 23
            tx = 243*x**10 + 3*x + 1
            px = 59049*x**20 - 59049*x**19 + 19683*x**18 + 729*x**11 - 486*x**10 + 243*x**9 + 3*x**2 + 1
            #sigma_x = 98415*x^19 - 137781*x^18 + 91854*x^17 - 45927*x^16 + 26244*x^15 - 15309*x^14 + 8748*x^13 - 5103*x^12 + 2916*x^11 - 486*x^10 - 324*x^9 + 486*x^8 - 243*x^7 + 135*x^6 - 81*x^5 + 45*x^4 - 27*x^3 + 15*x^2 - 4*x + 3
            sigma_x = (-243*x**9 + 81*x**8 - 2)/(3*(243*x**10 - 162*x**9 + x - 1))
            automorphisms = [sigma_x]
            yx = 243*x**10 - 162*x**9 + x - 1
            cx = 3*x**2 - 3*x + 1
            betax = 118098*x**19 - 177147*x**18 + 137781*x**17 - 78732*x**16 + 45927*x**15 - 26244*x**14 + 15309*x**13 - 8748*x**12 + 5103*x**11 - 1458*x**10 - 243*x**9 + 729*x**8 - 405*x**7 + 243*x**6 - 135*x**5 + 81*x**4 - 45*x**3 + 27*x**2 - 9*x + 4
    elif a != None and exp_tr != None and \
         (((a % 4) == 1 and ((a-k) % (2*a)) == 0) or
          ( ((a%4) == 2 or (a%4) == 3) and ((2*a-k) % (4*a)) == 0 )) \
          and gcd(exp_tr,k) == 1 :
        r1r2 = Phi_k(a*x**2).factor()
        if not len(r1r2) == 2 or (len(r1r2) == 1 and r1r2[0][1] == 2):
            return None #
        if len(r1r2) == 1:
            rx = r1r2[0][0]
        else:
            r1 = r1r2[0][0] ; r2 = r1r2[1][0]
            r1c = r1.list() ; r2c = r2.list()
            if r1 == r2(-x):
                if r1c[1] < 0: # coeff of x
                    rx = r2
                else:
                    rx = r1
            else: # they both have the same degree by construction
                rx = r1 # arbitrary choice
        zeta_x = a*x**2
        tx = (zeta_x**exp_tr + 1) % rx
        assert (Phi_k(tx-1) % rx) == 0, "Error k={}, Phi_k(tx-1)%rx != 0, = {}, tx=({}*x^2)^{}+1 mod rx = {}, rx={}".format(k, Phi_k(tx-1) % rx, a, exp_tr*m, tx, rx)
        # computes yx
        # computes 1/sqrt(-D) = sqrt(-D)/D
        #K = CyclotomicField(l)
        K = NumberField(rx, names=('w',)); (w,) = K._first_ngens(1)
        inv_sqrt_D_ = (sqrt(K(-D))/K(D))
        inv_sqrt_D = QQx(inv_sqrt_D_.polynomial())
        assert ((D*inv_sqrt_D**2+1) % rx) == 0
        yx = ((tx-2)*inv_sqrt_D) % rx
        px = QQx(tx**2 + D*yx**2)/4
        px_denom = lcm([pi.denom() for pi in px.list()])
        # would need to check that px generates primes
        cx = (px + 1 - tx) // rx
        betax, lambx = compute_beta_lambda(px, rx, tx, yx, D)

    else:
        raise ValueError("No configured set of parameters for Aurifeuillean construction with k={} D={} a={} exp_tr={} m={}".format(k, D, a, exp_tr, m))
    
    assert (Phi_k(tx-1) % rx) == 0, "Error k={}, Phi_k(tx-1)%rx != 0, = {}, tx={}, rx={}".format(k, Phi_k(tx-1) % rx, tx, rx)
    assert ((px+1-tx) % rx) == 0, "Error (px+1-tx)%rx != 0, px={}*({}), tx={}, rx={}, (px+1-tx)={}".format(px_denom, px_denom*px, tx,rx, (px+1-tx).factor())
    assert cx == (px+1-tx) // rx
    assert (Phi_k(px) % rx) == 0, "Error k={}, Phi_k(px)%rx != 0, = {}".format(k, Phi_k(px) % rx)
    assert px.is_irreducible(), "Error px is not irreducible, px= {}".format(px.factor())
    assert rx.is_irreducible(), "Error rx is not irreducible, rx= {}".format(rx.factor())
    assert 4*px == (tx**2 + D*yx**2), "Error 4*px != tx^2+D*yx^2, {}*px = {}, tx={}, D={}, yx={}, tx^2+Dyx^2 = {}".format(px_denom, px_denom*px,tx,D,yx,tx**2+D*yx**2)

    return px, rx, tx, cx, yx, betax, lambx, D, a, exp_tr, automorphisms, m, u_m, cofactor_r

def coeffs_params(k,D,a=None,exp_tr=None):
    px, rx, tx, cx, yx, betax, lambx, D, a, exp_tr, automorphisms, m, u_m, cofactor_r = polynomial_params(k,D,a,exp_tr)
    Px_denom = Integer(lcm([ci.denom() for ci in px.list()]))
    Px = [Integer(ci) for ci in (Px_denom*px).list()]
    Rx_denom = Integer(lcm([ci.denom() for ci in rx.list()]))
    Rx = [Integer(ci) for ci in (Rx_denom*rx).list()]
    Tx_denom = Integer(lcm([ci.denom() for ci in tx.list()]))
    Tx = [Integer(ci) for ci in (Tx_denom*tx).list()]
    Cx_denom = Integer(lcm([ci.denom() for ci in cx.list()]))
    Cx = [Integer(ci) for ci in (Cx_denom*cx).list()]
    Yx_denom = Integer(lcm([ci.denom() for ci in yx.list()]))
    Yx = [Integer(ci) for ci in (Yx_denom*yx).list()]
    if betax != 0 and lambx != 0:
        BETAx_denom = Integer(lcm([ci.denom() for ci in betax.list()]))
        BETAx = [Integer(ci) for ci in (BETAx_denom*betax).list()]
        LAMBx_denom = Integer(lcm([ci.denom() for ci in lambx.list()]))
        LAMBx = [Integer(ci) for ci in (LAMBx_denom*lambx).list()]
    else:
        BETAx_denom=0; BETAx=0; LAMBx_denom=0; LAMBx=0
    return Px, Px_denom, Rx, Rx_denom, Tx, Tx_denom, Cx, Cx_denom, Yx, Yx_denom, BETAx, BETAx_denom, LAMBx, LAMBx_denom, D, a, exp_tr, automorphisms

def poly_cofactor_gt(k: int, D: int=None, a: int=None, exp_tr: int=None):
    """Computes the co-factors for GT: Phi_k(p(x))/r(x)"""
    QQx = QQ['x']; (x,) = QQx._first_ngens(1)
    px, rx, tx, cx, yx, betax, lambx, D, a, exp_tr, automorphisms, m, u_m, cofactor_r = polynomial_params(k, D, a, exp_tr)
    cx = cyclotomic_polynomial(k)(px)
    assert (cx % rx) == 0
    cx = cx // rx
    return cx

class Aurifeuillean(BrezingWeng):
    """An Aurifeuillean pairing-friendly curve of embedding degree k
    """
    # re-use the init function of class BrezingWeng
    def __init__(self, k, u, D=None, e0=None, aa=None, m=None, a=None, b=None, cofactor_r=1, verbose_init=False):
        px, px_denom, rx, rx_denom, tx, tx_denom, cx, cx_denom, yx, yx_denom, betax, betax_denom, lambx, lambx_denom, D, aa, exp_tr, automorphisms = coeffs_params(k=k, D=D, a=aa, exp_tr=e0)
        super().__init__(k, D, u, px, px_denom, rx, rx_denom, tx, tx_denom, cx, cx_denom, yx, yx_denom, betax, betax_denom, lambx, lambx_denom, a, b, cofactor_r, verbose_init)
        self._aa = aa
        self._exp_tr = exp_tr
        self._automorphisms = automorphisms

    def _repr_(self):
        return "Aurifeuillean_k"+str(self._k)+"_D"+str(self._D)+" p"+str(self._pbits)+" (pairing-friendly curve k="+str(self._k)+") with seed "+str(self._u)+"\n"+super(BrezingWeng, self)._repr_()
