ZZy.<y> = ZZ[]

from tnfs.alpha.alpha_tnfs_2d import *
from tnfs.test_alpha.utils import *

h = y**3+15

deg_h = h.degree()
Kh.<ah> = NumberField(h)
Oh = Kh.maximal_order()
Oh1 = Oh.ideal(1) # ideal containing all, for testing wether two ideals are coprime
#OhX.<X> = PolynomialRing(Oh)
Khx.<x> = PolynomialRing(Kh)
Kh_x1x2.<x1,x2> = PolynomialRing(Kh,2)
print("h = {}".format(h))
monic_f = True

deg_f = 4
f = (8*ah**2 - 8*ah - 6)*x**4 + (-11*ah**2 - 11*ah + 1)*x**3 + (-8*ah**2 + 12*ah + 9)*x**2 + (-6*ah**2 + 10*ah + 9)*x + 9*ah**2 + 6*ah + 11
ZZX.<X> = ZZy[]
fyX = (8*y**2 - 8*y - 6)*X**4 + (-11*y**2 - 11*y + 1)*X**3 + (-8*y**2 + 12*y + 9)*X**2 + (-6*y**2 + 10*y + 9)*X + 9*y**2 + 6*y + 11

disc_f = f.discriminant()
I_disc_f = Oh.ideal(disc_f)
factors_disc_f = I_disc_f.factor()
ld_f = f.leading_coefficient()
I_ld_f = Oh.ideal(ld_f)
factors_ld_f = I_ld_f.factor()
gcd_disc_f = gcd([ZZ(ei) for ei in disc_f.list()])
bare_disc_f = disc_f/gcd_disc_f
I_bare_disc_f = Oh.ideal(bare_disc_f)
factors_bare_disc_f = I_bare_disc_f.factor()

print("f = {}".format(f))
print("disc(f) = {}".format(disc_f))
print("disc_f = {} * ({})".format(gcd_disc_f, disc_f/gcd_disc_f))
#print("Norm(disc_f) = {}".format(ZZ(disc_f.norm()).factor()))
print("Norm(disc_f/{}) = {}".format(gcd_disc_f, ZZ(bare_disc_f.norm()).factor() ))
#print("factors(disc(f)) = {}".format(factors_disc_f))
print("factors(disc(f)/{}) = {}".format(gcd_disc_f, factors_bare_disc_f))
print("ld(f) = {}".format(ld_f))
print("factors(ld(f)) = {}".format(factors_ld_f))

B = 2000
PrB = prime_range(B)
#list_I = [i[0] for l in PrB for i in Oh.ideal(l).factor()]
# since Magma and SageMath do not output the same list of ideals, here is the list given by Magma, in SageMath format
list_I_raw = [ [2,[1,1,0]],[2,[3,1,1]],[[-12,5,-2]],[[-5,-2,0]],[7,[1,1,0]],[[2,1,0]],[7,[11,1,0]],[11,[5,1,0]],[11,[3,6,1]],[13],[17,[9,1,0]],[17,[13,8,1]],[19],[[-2,1,0]],[[-4,-2,-1]],[29,[19,1,0]],[29,[13,10,1]],[[-16,-4,1]],[31,[22,1,0]],[31,[23,1,0]],[37],[41,[7,1,0]],[41,[8,34,1]],[43],[47,[11,1,0]],[47,[27,36,1]],[53,[16,1,0]],[53,[44,37,1]],[59,[19,1,0]],[59,[7,40,1]],[61],[[17,2,-2]],[67,[21,1,0]],[67,[40,1,0]],[71,[8,1,0]],[71,[64,63,1]],[73],[79,[17,1,0]],[79,[66,1,0]],[[4,-1,0]],[[2,-2,-1]],[[34,-11,6]],[[-104,42,-17]],[[106,33,-4]],[97],[[34,-1,-6]],[[76,-26,-23]],[103],[[-8,-3,0]],[[64,-24,9]],[109],[113,[98,1,0]],[113,[112,15,1]],[127],[[11,-4,2]],[[-1,16,6]],[[-8,2,-1]],[[-34,-1,4]],[139],[149,[27,1,0]],[149,[133,122,1]],[151],[157],[163],[[23,-10,4]],[[-71,-10,8]],[[-2,2,-1]],[[-26,-11,2]],[179,[172,1,0]],[179,[49,7,1]],[181],[191,[40,1,0]],[191,[72,151,1]],[193],[[-38,15,-6]],[[94,30,-3]],[199],[211],[[-22,1,4]],[[8,-14,-7]],[[-7,-2,0]],[227,[145,1,0]],[227,[141,82,1]],[[-109,44,-18]],[229,[181,1,0]],[229,[209,1,0]],[[-2,0,-1]],[[-4,15,2]],[239,[202,1,0]],[239,[174,37,1]],[241],[[-4,3,2]],[[106,-48,17]],[[8,-4,1]],[[-4,-17,-8]],[263,[41,1,0]],[263,[103,222,1]],[269,[161,1,0]],[269,[97,108,1]],[271],[277,[18,1,0]],[[13,-4,2]],[277,[149,1,0]],[[86,-35,14]],[[46,70,21]],[283,[61,1,0]],[283,[85,1,0]],[[-8,4,3]],[[-2,-2,-1]],[[-34,19,-2]],[307],[[-26,-8,1]],[[-196,-257,-72]],[313],[317,[253,1,0]],[317,[292,64,1]],[331,[159,1,0]],[[-14,-1,2]],[331,[295,1,0]],[337],[347,[265,1,0]],[347,[131,82,1]],[349],[[62,-2,-11]],[[-146,49,44]],[[44,-18,7]],[[46,57,16]],[367,[215,1,0]],[367,[229,1,0]],[[-2,-4,-1]],[373],[379],[[122,-49,20]],[[-184,22,39]],[[29,-8,-8]],[[359,-22,-68]],[[28,-12,5]],[[-2,-3,0]],[[-13,0,2]],[[56,-22,9]],[[-166,-17,20]],[409],[419,[111,1,0]],[419,[170,308,1]],[421],[[11,-6,2]],[[-59,6,14]],[433],[439],[[-58,-26,-1]],[[-206,-143,-24]],[449,[142,1,0]],[449,[408,307,1]],[457],[[26,-11,4]],[[-16,-46,-17]],[463,[77,1,0]],[463,[158,1,0]],[[-7,2,0]],[467,[67,1,0]],[467,[286,400,1]],[[-1,4,2]],[[121,-56,18]],[487],[491,[472,1,0]],[491,[361,19,1]],[499],[503,[269,1,0]],[503,[432,234,1]],[509,[201,1,0]],[509,[190,308,1]],[521,[335,1,0]],[521,[210,186,1]],[523],[541,[74,1,0]],[541,[118,1,0]],[[61,-24,10]],[547],[[8,-3,2]],[[-26,-36,-7]],[[2,8,3]],[[364,-151,58]],[[14,-2,-3]],[[-286,107,-46]],[[-29,-2,4]],[[16,-5,2]],[[16,-8,3]],[577],[[-8,5,-2]],[[-86,-20,9]],[593,[58,1,0]],[593,[399,535,1]],[599,[108,1,0]],[599,[283,491,1]],[601],[607],[613],[[-7,-4,0]],[[-49,28,-16]],[619],[631],[[-4,-2,1]],[[-14,-23,8]],[643,[92,1,0]],[643,[209,1,0]],[[22,-8,3]],[647,[359,1,0]],[647,[128,288,1]],[653,[107,1,0]],[653,[348,546,1]],[659,[635,1,0]],[659,[576,24,1]],[661],[673,[124,1,0]],[[97,-40,16]],[673,[662,1,0]],[[8,13,4]],[[-1114,-316,55]],[[-32,-3,4]],[[326,-324,-185]],[691],[701,[108,1,0]],[701,[448,593,1]],[709],[[-14,6,-3]],[[-74,-51,-6]],[727],[733],[739],[743,[257,1,0]],[743,[665,486,1]],[751],[757],[[-4,-7,-2]],[[-226,88,-41]],[769],[[-17,6,-2]],[[-109,-42,-2]],[787],[797,[589,1,0]],[797,[226,208,1]],[809,[339,1,0]],[809,[43,470,1]],[811,[47,1,0]],[[-16,6,5]],[811,[433,1,0]],[[-19,-8,0]],[[361,-152,64]],[823],[827,[763,1,0]],[827,[788,64,1]],[829,[297,1,0]],[829,[649,1,0]],[[34,-15,6]],[839,[625,1,0]],[839,[490,214,1]],[[-37,16,-6]],[853,[338,1,0]],[853,[366,1,0]],[857,[370,1,0]],[857,[637,487,1]],[859],[863,[804,1,0]],[863,[29,59,1]],[877,[208,1,0]],[[28,-11,4]],[877,[774,1,0]],[881,[571,1,0]],[881,[71,310,1]],[883],[[-83,34,-14]],[[-251,-118,-6]],[907,[491,1,0]],[[88,11,-10]],[907,[795,1,0]],[911,[142,1,0]],[911,[122,769,1]],[919],[929,[395,1,0]],[929,[882,534,1]],[937,[375,1,0]],[[-28,6,7]],[937,[814,1,0]],[941,[112,1,0]],[941,[311,829,1]],[[-37,-20,-2]],[[-731,-410,-46]],[953,[664,1,0]],[953,[610,289,1]],[967],[[-34,-9,2]],[[-284,-606,-199]],[977,[436,1,0]],[977,[558,541,1]],[[-2,5,2]],[[154,-50,29]],[991],[997,[103,1,0]],[[13,20,6]],[997,[489,1,0]],[1009],[1013,[738,1,0]],[1013,[663,275,1]],[[74,-29,12]],[[-256,14,47]],[1021],[[4,-23,-10]],[[856,152,-79]],[1033,[26,1,0]],[[-52,22,-9]],[1033,[938,1,0]],[1039],[[16,7,0]],[[256,-112,49]],[1051,[565,1,0]],[1051,[733,1,0]],[[-44,-13,2]],[[86,-12,-19]],[[-344,57,80]],[1063],[1069],[1087],[1091,[13,1,0]],[1091,[169,1078,1]],[1093],[1097,[960,1,0]],[1097,[120,137,1]],[[-2,4,1]],[[-64,7,-18]],[1109,[664,1,0]],[1109,[623,445,1]],[1117,[547,1,0]],[1117,[833,1,0]],[[-88,-48,-5]],[1123],[1129],[1151,[528,1,0]],[1151,[242,623,1]],[1153],[1163,[816,1,0]],[1163,[620,347,1]],[1171,[255,1,0]],[1171,[377,1,0]],[[-46,18,-7]],[1181,[478,1,0]],[1181,[551,703,1]],[[-52,6,11]],[[634,-123,-154]],[1193,[765,1,0]],[1193,[655,428,1]],[[1,10,4]],[[-1,44,18]],[[-1,-4,-2]],[1213,[66,1,0]],[1213,[168,1,0]],[[-112,-38,3]],[[-8,-4,-1]],[[-124,47,-8]],[1223,[869,1,0]],[1223,[570,354,1]],[[134,-55,22]],[[-194,110,77]],[1231,[283,1,0]],[1231,[989,1,0]],[[-46,-26,-3]],[1237,[568,1,0]],[[-13,-4,0]],[1237,[975,1,0]],[1249],[[-16,3,4]],[[436,-192,73]],[[-8,3,2]],[[-154,36,-25]],[1279],[1283,[188,1,0]],[1283,[703,1095,1]],[[-46,1,8]],[[706,-254,-219]],[1291],[1297],[1301,[863,1,0]],[1301,[597,438,1]],[1303,[168,1,0]],[[-7,4,0]],[1303,[811,1,0]],[1307,[766,1,0]],[1307,[1220,541,1]],[[-61,-10,6]],[[121,-400,-182]],[1321],[1327],[[-4,1,2]],[[-46,56,-9]],[1367,[1215,1,0]],[1367,[1232,152,1]],[[-2,19,8]],[[-1406,-262,125]],[1381],[1399],[[-14,4,-1]],[[-136,-41,-2]],[1423],[1427,[937,1,0]],[1427,[364,490,1]],[1429],[[-77,-46,-6]],[[-529,-268,-22]],[1439,[247,1,0]],[1439,[571,1192,1]],[1447],[[-11,2,0]],[[-121,-22,-4]],[[22,-11,4]],[1453,[1407,1,0]],[1453,[1411,1,0]],[1459],[1471],[1481,[774,1,0]],[1481,[752,707,1]],[1483],[[-22,-2,3]],[[-394,179,-70]],[[34,-14,5]],[1489,[1159,1,0]],[1489,[1422,1,0]],[1493,[112,1,0]],[1493,[600,1381,1]],[[-1,2,2]],[[-61,58,-6]],[[-71,30,-12]],[[-359,-30,48]],[[-107,44,-18]],[[-431,-152,10]],[1531,[95,1,0]],[[-29,-12,0]],[1531,[1306,1,0]],[1543],[[34,-12,5]],[1549,[1437,1,0]],[1549,[1481,1,0]],[[17,-4,2]],[[-169,-8,18]],[1559,[720,1,0]],[1559,[812,839,1]],[1567],[1571,[1425,1,0]],[1571,[893,146,1]],[[-64,26,-11]],[[-19,8,-4]],[[-26,19,12]],[1583,[1294,1,0]],[1583,[1205,289,1]],[[88,-35,14]],[[-2,1,2]],[[-2,-11,-4]],[1601,[406,1,0]],[1601,[1534,1195,1]],[[-8,1,-2]],[[-34,52,15]],[[-56,-40,-7]],[1609,[1168,1,0]],[1609,[1279,1,0]],[1613,[1405,1,0]],[1613,[1326,208,1]],[[-76,-21,4]],[[-254,-456,-143]],[1621],[1627],[[53,-18,-16]],[[-791,24,140]],[1657],[1663],[1667,[173,1,0]],[1667,[1590,1494,1]],[1669],[1693,[54,1,0]],[1693,[266,1,0]],[[-52,-21,0]],[[-52,-31,-4]],[[-926,-472,-39]],[1699],[1709,[164,1,0]],[1709,[1261,1545,1]],[1721,[872,1,0]],[1721,[1423,849,1]],[1723],[1733,[1335,1,0]],[1733,[701,398,1]],[[-1,2,-2]],[[46,-11,-12]],[[136,28,-11]],[1747],[1753],[1759,[269,1,0]],[[56,-34,-23]],[1759,[1209,1,0]],[[-13,2,-2]],[1777,[489,1,0]],[1777,[1128,1,0]],[1783],[[23,14,2]],[[-2209,-1088,-78]],[1789,[1031,1,0]],[1789,[1069,1,0]],[[-4,-5,-2]],[1801,[419,1,0]],[1801,[1412,1,0]],[[-1,0,-2]],[[-4,-5,0]],[[-16,20,-25]],[1823,[170,1,0]],[1823,[1555,1653,1]],[1831],[1847,[709,1,0]],[1847,[297,1138,1]],[[-1,-2,-2]],[1861,[783,1,0]],[1861,[1047,1,0]],[1867,[707,1,0]],[[-2,-5,0]],[1867,[1533,1,0]],[[-4,-6,-1]],[[-106,39,-32]],[1873],[[-53,-56,-14]],[[-709,-242,18]],[1879],[[-31,12,10]],[[1501,-18,-254]],[1901,[656,1,0]],[1901,[710,1245,1]],[1907,[274,1,0]],[1907,[703,1633,1]],[[92,20,-7]],[[-64,-425,-162]],[[116,-46,19]],[[-346,79,88]],[1933],[[-31,2,6]],[[-1681,448,458]],[1951],[[-2,-1,-2]],[[-34,62,3]],[[-16,0,3]],[[256,-135,48]],[[58,-25,10]],[[28,11,0]],[[-2,-1,2]],[1993,[860,1,0]],[1993,[1258,1,0]],[[112,1,-18]],[1997,[1969,1,0]],[1997,[784,28,1]],[1999] ]

list_I = [Oh.ideal([Kh(Igen) for Igen in Ia]) for Ia in list_I_raw]
print("there are {} prime ideals above the {} prime numbers up to B={}".format(len(list_I), len(PrB), B))

#N = 10**5 # 10^5 = 1 min on muscox
N = 10**8 #N = 10**8 div 32; # catrel
cores = 8 #cores = 128
Ni = N // cores
A = 10**6
print("computing experimentally the valuation for N={} random coprime pairs".format(N))
#print("id = {}, {} samples".format(id, Ni))
#sum_val_I, ratio_coprime_pairs_Oh = MonteCarlo_count_val(Ni,A,Oh,Oh1,deg_h,f,list_I)

ratio_coprime_pairs_Oh = 0.551321434431037060719256018861
sum_val_I = [ 133343329, 20001870, 99987108, 20822439, 24999791, 37513079, 27083835, 0, 825609, 45690, 23607316, 346664, 14590, 4353772, 0, 0, 0, 12918376, 12914908, 0, 7930, 2440633, 59144, 0, 4259840, 90376, 1889104, 71231, 0, 28768, 0, 0, 1491841, 0, 2817248, 19939, 496, 0, 1265424, 0, 0, 14286, 0, 0, 232, 0, 19603, 192, 0, 17331, 155, 1767643, 7854, 0, 762380, 23333, 2919881, 5405, 76, 0, 0, 21, 0, 0, 1198757, 3699, 1156379, 3312, 2234450, 0, 16, 522436, 0, 15, 507731, 5225, 9, 0, 1794052, 447275, 0, 883014, 2001, 1749091, 873713, 873890, 0, 3543, 417244, 3485, 8, 0, 3234, 388508, 0, 0, 2832, 744199, 2753, 0, 721074, 360845, 0, 0, 0, 353747, 352125, 707757, 684211, 2339, 0, 321503, 1052, 0, 0, 0, 302703, 301912, 302592, 2, 287920, 806, 0, 283311, 1678, 0, 0, 271094, 272368, 544576, 0, 0, 260982, 0, 514392, 0, 504407, 1007767, 251786, 249478, 630, 2, 237997, 0, 2, 464122, 475, 3, 0, 225770, 1017, 222281, 1008, 0, 0, 464, 215179, 215334, 0, 214322, 1843, 416678, 865, 0, 203122, 788, 1, 198535, 395, 392208, 0, 0, 0, 1, 184488, 184832, 369083, 0, 179600, 324, 177671, 317, 176074, 635, 175242, 0, 176080, 0, 341713, 0, 0, 0, 333705, 566, 0, 0, 0, 0, 271, 0, 0, 155608, 469, 622144, 0, 155606, 0, 0, 613071, 0, 303576, 0, 0, 148661, 148426, 297529, 295510, 871, 146867, 427, 2, 0, 413, 0, 277982, 0, 1, 1, 0, 537871, 175, 0, 0, 130932, 372, 0, 258355, 162, 0, 0, 154, 124368, 0, 245738, 0, 0, 0, 0, 0, 0, 0, 241406, 0, 0, 0, 0, 233957, 0, 0, 116597, 126, 0, 0, 0, 114223, 227528, 113837, 454428, 152, 0, 225268, 0, 219987, 110788, 110577, 109843, 0, 0, 430902, 226, 0, 0, 107452, 106264, 0, 0, 0, 209800, 0, 0, 0, 113, 102710, 114, 203256, 104, 0, 0, 200772, 100350, 0, 98802, 192, 98479, 94, 0, 0, 85, 97033, 388095, 96984, 1, 0, 176, 190564, 0, 94889, 187912, 93, 0, 0, 0, 91830, 169, 0, 0, 106, 0, 92, 89818, 0, 0, 88994, 0, 0, 0, 173679, 132, 0, 86064, 0, 0, 0, 84696, 170061, 73, 168411, 128, 84163, 0, 166211, 84075, 82344, 82247, 0, 82043, 164217, 63, 163735, 136, 0, 61, 0, 162232, 0, 161174, 80763, 0, 0, 0, 0, 156536, 62, 0, 0, 0, 155254, 114, 0, 0, 153956, 0, 153754, 0, 154387, 153124, 108, 151581, 57, 0, 0, 73588, 0, 0, 49, 73172, 110, 0, 0, 71054, 0, 0, 0, 0, 0, 139553, 46, 279048, 0, 0, 69001, 0, 137831, 0, 137592, 0, 1, 135074, 0, 0, 134841, 179, 67412, 134936, 0, 0, 44, 66568, 30, 0, 0, 131493, 49, 130805, 65495, 0, 0, 0, 64478, 64722, 0, 52, 0, 46, 0, 63346, 36, 0, 63612, 0, 63369, 42, 62247, 62604, 0, 124116, 77, 123926, 0, 248338, 0, 124193, 0, 46, 0, 44, 0, 0, 121916, 81, 0, 0, 120160, 68, 0, 0, 58531, 0, 59247, 66, 0, 0, 73, 116162, 0, 0, 0, 40, 57637, 229336, 0, 0, 0, 56787, 56498, 113531, 56138, 0, 112851, 0, 56035, 0, 223580, 55987, 111507, 55572, 55198, 55548, 110768, 108, 55088, 0, 0, 107955, 0, 107668, 0, 53885, 0, 106741, 53456, 106980, 0, 0, 0, 55, 1, 52575, 107, 52678, 31, 0, 54, 0, 117, 0, 31, 0, 205353, 40, 0, 0, 0, 0, 51, 50276, 0, 100706, 50342, 99902, 100263, 0, 26, 0 ]

print("\nratio_coprime_pairs = {}".format(ratio_coprime_pairs_Oh))
print("\nsum_val_I = {}".format(sum_val_I))
#print("\nratio_coprime_pairs_{} = {}".format(id, ratio_coprime_pairs_Oh))
#print("\nsum_val_I_{} = {}".format(id, sum_val_I))

#quit

thr_val, thr_val_non_Pr, idx_bad_I, idx_proj_I = compute_expected_valuation(list_I,f,I_disc_f,Kh,Oh,Oh1,Kh_x1x2)

av_val = [float(sum_val_I[j]/N) for j in range(len(list_I))]
ratio = ratio_val(av_val, thr_val)
ratio_non_Pr = ratio_val(av_val, thr_val_non_Pr)

wrong_values = print_ratio(ratio, thr_val, av_val, 0.2, N, min_hit_I=100)
print("possibly wrong values at indices {}".format(wrong_values))
print("ideals concerned:")
for idx_wrong in wrong_values:
    I = list_I[idx_wrong]
    Norm_I = abs(ZZ(I.norm()))
    I_pr = I.is_principal()
    if I_pr:
        gen = I.gens_reduced()[0]
	gen_s = "{:11s}".format(str(Kh(gen)))
    else:
        gen1, gen2 = I.gens_two()
	gen_s = "{},{}".format(gen1,gen2)
    if idx_wrong in idx_bad_I:
        str_bad = "bad"
    else:
        str_bad = "good"
    print("I{:2d}, Norm {:6d}, <{}> {}".format(idx_wrong, Norm_I, gen_s, str_bad))

print("the bad ideals are at index: {}".format(idx_bad_I))

s = ""
for i in idx_bad_I:
    s += "{:.5f}, ".format(float(ratio[i]))
print("the ratio between experimental and theoretical expected valuation for bad ideals is:  ["+s+"]")
print("these bad ideals are principal: {}".format([list_I[i].is_principal() for i in idx_bad_I]))

print("projective roots:")
print("the ideals dividing ld(f) are at index: {}".format(idx_proj_I))
s = ""
for i in idx_proj_I:
    s += "{:.5f}, ".format(float(ratio[i]))
print("the ratio between experimental and theoretical expected valuation for these ideals is:  ["+s+"]")
print("these ideals are principal: {}".format([list_I[i].is_principal() for i in idx_proj_I]))


print("\nwith I.gens_two():")
wrong_values, idx_wrong = print_err_val_non_principal_ideal(thr_val, thr_val_non_Pr)

print("possibly wrong values at indices {}".format(idx_wrong))
print("ideals concerned:")
for idx in idx_wrong:
    I = list_I[idx]
    Norm_I = abs(ZZ(I.norm()))
    I_pr = I.is_principal()
    gen1, gen2 = I.gens_two()
    gen_s_two = "{},{}".format(gen1,gen2)
    if I_pr:
        gen = I.gens_reduced()[0]
	gen_s = "{:11s}".format(str(Kh(gen)))
        print("I{:2d}, Norm {:6d}, <{}> (gens_two <{}>)".format(idx, Norm_I, gen_s, gen_s_two))
    else:
        print("I{:2d}, Norm {:6d}, <{}>".format(idx, Norm_I, gen_s_two))

alpha_f = alpha_TNFS_2d(fyX,h,B,test_principal=True)
print("now computes alpha: {}".format(alpha_f))
print("in basis 2: {:.3f}/log(2) = {:.3f}\n".format(float(alpha_f), float(alpha_f/log(2))))
print("computes alpha without testing for principal ideals:")
alpha_f_ = alpha_TNFS_2d(fyX,h,B,test_principal=False)
print("             alpha: {}".format(alpha_f_))


"""

# nice latex printing
RR = RealField()

print("bad ideals")
for i in idx_bad_I:
    I = list_I[i]
    #d_I = I.degree()
    d_I = I.residue_class_degree()
    gens = I.gens_two()
    l = gens[0]
    l = ZZ(l)
    if len(gens) > 1:
	fi = gens[1]
	fi = ZZy([ZZ(ai) for ai in fi.list()])
	gen_s = "{:3d},{:7s}".format(l,str(fi))
    else:
	gen_s = "{:3d}        ".format(l)
    if d_I > 1:
	print("${:3d}^{}$ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, d_I, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
    else:
	print("${:3d}  $ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))

print("regular ideals")
for i in range(100):
    if thr_val[i] == 0 or i in idx_proj_I or i in idx_bad_I:
	continue
    I = list_I[i]
    #d_I = I.degree()
    d_I = I.residue_class_degree()
    #gens = I.generators()
    gens = I.gens_two()
    l = gens[0]
    l = ZZ(l)
    if len(gens) > 1:
	fi = gens[1]
	fi = ZZy([ZZ(ai) for ai in fi.list()])
	gen_s = "{:3d},{:7s}".format(l,str(fi))
    else:
	gen_s = "{:3d}        ".format(l)
    if d_I > 1:
	print("${:3d}^{}$ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, d_I, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
    else:
	print("${:3d}  $ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
"""
