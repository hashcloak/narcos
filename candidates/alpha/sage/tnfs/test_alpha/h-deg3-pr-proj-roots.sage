ZZy.<y> = ZZ[]

from tnfs.alpha.alpha_tnfs_2d import *
from tnfs.test_alpha.utils import *

h = y**3+3

deg_h = h.degree()
Kh.<ah> = NumberField(h)
Oh = Kh.maximal_order()
Oh1 = Oh.ideal(1) # ideal containing all, for testing wether two ideals are coprime
#OhX.<X> = PolynomialRing(Oh)
Khx.<x> = PolynomialRing(Kh)
Kh_x1x2.<x1,x2> = PolynomialRing(Kh,2)
print("h = {}".format(h))
monic_f = True

deg_f = 4
f = (-6*ah**2 + 4*ah - 6)*x**4 + (3*ah**2 - 8*ah - 3)*x**3 + (-5*ah**2 - 6*ah - 11)*x**2 + (4*ah**2 - 6*ah + 11)*x - 11*ah + 12
ZZX.<X> = ZZy[]
fyX = (-6*y**2 + 4*y - 6)*X**4 + (3*y**2 - 8*y - 3)*X**3 + (-5*y**2 - 6*y - 11)*X**2 + (4*y**2 - 6*y + 11)*X - 11*y + 12

disc_f = f.discriminant()
I_disc_f = Oh.ideal(disc_f)
factors_disc_f = I_disc_f.factor()
ld_f = f.leading_coefficient()
I_ld_f = Oh.ideal(ld_f)
factors_ld_f = I_ld_f.factor()
gcd_disc_f = gcd([ZZ(ei) for ei in disc_f.list()])
bare_disc_f = disc_f/gcd_disc_f
I_bare_disc_f = Oh.ideal(bare_disc_f)
factors_bare_disc_f = I_bare_disc_f.factor()

print("f = {}".format(f))
print("disc(f) = {}".format(disc_f))
print("disc_f = {} * ({})".format(gcd_disc_f, disc_f/gcd_disc_f))
#print("Norm(disc_f) = {}".format(ZZ(disc_f.norm()).factor()))
print("Norm(disc_f/{}) = {}".format(gcd_disc_f, ZZ(bare_disc_f.norm()).factor() ))
#print("factors(disc(f)) = {}".format(factors_disc_f))
print("factors(disc(f)/{}) = {}".format(gcd_disc_f, factors_bare_disc_f))
print("ld(f) = {}".format(ld_f))
print("factors(ld(f)) = {}".format(factors_ld_f))

B = 2000
PrB = prime_range(B)
#list_I = [i[0] for l in PrB for i in Oh.ideal(l).factor()]
# since Magma and SageMath do not output the same list of ideals, here is the list given by Magma, in SageMath format
list_I_raw = [[[1,1,0]],[[-1,1,-1]],[[0,1,0]],[[2,1,0]],[[-2,1,2]],[7],[[2,-1,0]],[[-4,-2,-1]],[13],[[-2,0,-1]],[[-4,3,2]],[19],[[1,2,0]],[[-1,2,-4]],[[2,2,1]],[[-1,-8,-6]],[31],[37],[[4,2,-1]],[[13,-2,-6]],[43],[[-2,1,-2]],[[-2,-10,-3]],[[5,0,-2]],[[-14,-6,5]],[[-2,2,1]],[[23,20,2]],[[-4,-1,0]],[[4,-2,-3]],[[-2,-2,1]],[[-5,-4,0]],[[4,-1,-2]],[[-4,1,0]],[[-1,0,2]],[[-34,-18,3]],[[-2,-3,0]],[[-4,0,-1]],[[-1,0,-2]],[79],[[4,1,-2]],[[28,5,-8]],[[-2,3,0]],[[-4,-6,-9]],[97],[[5,2,0]],[[20,-8,-17]],[[-2,-1,2]],[[-2,-4,-1]],[[-2,2,3]],[[-2,-3,-2]],[[-10,-21,-12]],[109],[[-2,-1,-2]],[[-22,-37,-16]],[127],[[-1,-2,2]],[[-11,-14,6]],[[-8,-5,0]],[[-8,5,14]],[139],[[-5,2,0]],[[-25,-10,-4]],[[-4,2,1]],[[7,4,0]],[[5,2,-2]],[157],[163],[[2,-5,-4]],[[-14,-23,-2]],[[2,-4,-3]],[[-23,-28,-4]],[[4,0,-3]],[[49,18,-8]],[181],[[-1,-4,0]],[[-10,40,31]],[[-1,4,0]],[[10,2,-3]],[[-1,4,2]],[[-5,0,-2]],[[-25,12,10]],[199],[211],[223],[[8,-1,-4]],[[-32,-19,10]],[229],[[7,0,-4]],[[-46,-12,7]],[[1,-4,-4]],[[34,28,9]],[241],[[-2,0,-3]],[[-4,27,6]],[[-5,2,2]],[[-68,-38,9]],[[-2,4,1]],[[47,64,20]],[[8,0,-3]],[[-47,-18,16]],[[-4,-3,-2]],[[-7,0,2]],[[2,-3,-4]],[277],[[-4,-4,1]],[[-49,22,36]],[283],[[-8,-1,2]],[[56,11,-24]],[[-10,-3,2]],[[-4,-6,-3]],[[-4,0,-3]],[[-4,-5,0]],[[28,-35,-34]],[313],[[-5,4,0]],[[-25,-20,-16]],[331],[337],[[-10,-5,2]],[[-46,11,20]],[349],[[-5,-2,-2]],[[8,-62,-49]],[[-4,-6,-1]],[[13,-42,-30]],[[-7,2,0]],[[-2,-2,3]],[[-2,-5,0]],[373],[379],[[-2,5,0]],[[38,95,46]],[[-4,-7,-2]],[[4,-43,-24]],[397],[[10,-1,-6]],[[-58,-13,4]],[409],[[-4,-2,3]],[[109,22,-34]],[421],[[-8,-3,0]],[[56,-21,-46]],[433],[[-4,5,0]],[[10,4,-1]],[[-8,-8,-1]],[[13,4,-4]],[[-58,4,15]],[[-5,6,6]],[[-32,-42,1]],[457],[[5,-4,-4]],[[-62,-52,1]],[463],[[-1,-6,-2]],[[-20,-66,-31]],[[-1,2,4]],[[-88,-68,-9]],[487],[[-2,5,2]],[[62,83,24]],[[-4,-2,-3]],[[-5,-4,2]],[[5,10,4]],[[-8,0,1]],[[119,18,-48]],[[-8,-1,0]],[[104,-13,-62]],[[-8,0,-1]],[[119,-30,-80]],[[7,6,2]],[[-5,-6,0]],[[-2,-6,-1]],[541],[[-7,2,2]],[[-4,-4,-3]],[[5,-4,-6]],[[-14,-9,0]],[[-14,9,34]],[[8,7,2]],[[8,-37,-40]],[[-2,-5,-4]],[[-46,-65,-30]],[571],[[-11,-6,2]],[[-8,-6,1]],[[-1,0,-4]],[[-8,1,2]],[[128,43,-36]],[[-8,3,0]],[[200,75,-46]],[[11,-2,-6]],[[-56,-38,17]],[601],[607],[[11,0,-6]],[[8,0,-5]],[[-16,-6,3]],[[-8,-4,-1]],[[47,-46,-60]],[[-5,-8,-2]],[[-2,-5,2]],[[-4,-7,-4]],[631],[[-8,-2,-1]],[[83,-50,-78]],[[-2,-1,4]],[[-7,-2,-2]],[[-2,-4,3]],[[-1,-6,0]],[[-16,96,71]],[[-2,-1,-4]],[[-118,-121,-30]],[[-4,-1,4]],[[-148,-53,30]],[[13,2,-4]],[[4,-7,-6]],[[-13,-8,0]],[673],[[4,-2,-5]],[[109,62,-2]],[[11,6,0]],[[44,-24,-49]],[691],[[10,12,3]],[[-94,-156,-65]],[709],[[-2,-3,-4]],[[-82,-105,-38]],[[-7,-4,-2]],[[-4,5,2]],[[14,5,-4]],[733],[739],[[-4,-5,2]],[[124,-35,-80]],[751],[[-2,-6,1]],[[-10,0,3]],[[10,-3,-6]],[[-7,-2,4]],[[136,28,-39]],[769],[[-8,-12,-5]],[[140,168,47]],[[-8,-4,3]],[[10,-1,-4]],[[-10,-2,1]],[[14,4,-3]],[[-71,-8,44]],[[-4,-6,1]],[[85,-66,-82]],[811],[[7,-2,-6]],[[112,50,-7]],[823],[[-1,-6,2]],[[124,-78,-111]],[829],[[-11,-2,2]],[[116,10,-57]],[[14,-1,-8]],[[2,8,3]],[[2,11,6]],[[-17,-8,2]],[[70,-139,-128]],[859],[[4,-6,-7]],[[-85,-54,-14]],[877],[[-8,3,4]],[[-128,-75,18]],[883],[[1,-10,-8]],[[248,155,-14]],[907],[[-1,-4,4]],[[250,44,-87]],[[-4,6,1]],[[-10,-3,0]],[[14,12,1]],[[-8,-5,-2]],[[32,-77,-76]],[937],[[10,11,2]],[[-34,59,36]],[[8,8,3]],[[-1,-62,-56]],[[-8,3,2]],[[200,99,-32]],[[-7,4,4]],[[-2,-10,-5]],[[-7,4,2]],[[1,-6,-6]],[[88,78,25]],[[-2,11,8]],[[265,160,-14]],[[-8,4,1]],[[239,130,-28]],[[-4,-3,-4]],[[-4,-12,-7]],[[-10,0,1]],[[-10,-1,0]],[[-13,-4,2]],[[8,-1,-6]],[[-8,-3,4]],[[16,0,-7]],[[-10,0,-1]],[[-14,-10,-1]],[[-23,28,54]],[[8,-4,-5]],[[-119,-82,12]],[[2,-5,-6]],[[-2,-7,0]],[[-11,-4,4]],[[16,2,-7]],[[248,-34,-145]],[1033],[1039],[[-10,-2,5]],[[145,28,-38]],[1051],[[-4,0,5]],[[-193,-90,24]],[1063],[1069],[1087],[[-10,-10,-1]],[[49,-64,-50]],[[-4,-8,-5]],[[14,4,-5]],[[-4,7,0]],[[8,-6,-7]],[[-83,-78,6]],[[8,-5,-6]],[[-104,-83,8]],[[17,2,-6]],[[-80,-34,41]],[[-2,0,5]],[[-4,6,3]],[[2,-9,-8]],[1123],[1129],[[-4,3,6]],[[148,93,4]],[1153],[[-8,-2,-3]],[[35,-146,-122]],[1171],[[2,-10,-7]],[[-47,-88,-14]],[[-10,-9,0]],[[70,-63,-62]],[[-7,-8,0]],[[70,-80,-79]],[1201],[1213],[[-2,7,2]],[[98,163,60]],[[2,-9,-6]],[[-62,-99,-20]],[[-5,-4,-4]],[[-58,-148,-81]],[1231],[1237],[[-1,8,4]],[[-10,-1,-2]],[[-14,-11,0]],[[-11,0,2]],[[206,42,-77]],[[-5,6,4]],[[140,132,15]],[1279],[[-13,-8,2]],[[106,-38,-59]],[[-2,-2,-5]],[[-169,-176,-46]],[1291],[1297],[[-2,-4,-5]],[[-121,-148,-52]],[[7,-8,-8]],[[-10,-7,-2]],[[-2,-5,4]],[[-11,-2,0]],[[176,-32,-113]],[[-1,-8,-2]],[[-38,-146,-75]],[[-2,-2,5]],[[-10,2,3]],[[-16,-13,-2]],[1327],[[-10,-7,2]],[[130,-43,-80]],[[10,-3,-8]],[[-142,-57,6]],[[-8,-1,-4]],[[-16,-205,-138]],[1381],[[-7,-2,-4]],[[16,8,-1]],[[7,8,4]],[[-20,-13,0]],[[1,-212,-144]],[1423],[[-8,-4,-3]],[[23,-142,-116]],[1429],[[-7,-4,4]],[[-226,-20,87]],[[20,0,-9]],[[304,-12,-151]],[1447],[[11,8,2]],[[38,-74,-85]],[1453],[1459],[1471],[[-8,-13,-6]],[[263,290,72]],[1483],[[10,1,-6]],[[190,53,-40]],[1489],[[8,9,4]],[[-16,-93,-74]],[[4,-7,-8]],[[-124,-85,-22]],[[-10,-6,3]],[[169,-24,-86]],[[10,-8,-11]],[[374,136,-89]],[[-2,3,6]],[[19,6,-4]],[[-10,-3,-2]],[[-10,-11,-4]],[[-10,4,1]],[[8,-2,-7]],[[-10,3,2]],[[14,3,-6]],[[13,6,0]],[[4,14,7]],[[316,274,41]],[[14,-1,-6]],[[-146,-67,44]],[1567],[[-11,2,4]],[[212,92,-49]],[1579],[[-8,6,1]],[[299,222,6]],[[-8,-7,2]],[[-10,-5,-2]],[[1,-10,-6]],[[-7,0,6]],[[-226,-90,35]],[[-4,-5,4]],[[292,13,-126]],[[-8,-8,1]],[[-1,8,2]],[[13,10,2]],[[4,10,3]],[[-11,-130,-70]],[[14,0,-5]],[[-167,-60,56]],[[-1,-6,-6]],[[-13,0,4]],[[-4,-6,-5]],[1627],[[16,15,2]],[[-97,-270,-144]],[1657],[1663],[[16,1,-8]],[[-160,-29,26]],[[-11,-10,0]],[[11,-2,-8]],[[-2,-4,5]],[1693],[[17,4,-4]],[[-134,-20,73]],[1699],[[-5,12,10]],[[406,213,-44]],[[-14,-2,3]],[[191,28,-86]],[1723],[[-2,8,3]],[[119,188,64]],[1741],[1747],[1753],[[-8,-10,-1]],[[-10,-2,-3]],[[-8,-13,-4]],[1777],[[-7,-6,-4]],[[-14,-9,2]],[[-2,-9,-2]],[[11,-8,-10]],[[466,157,-112]],[1789],[1801],[[-1,2,6]],[[-244,-182,-17]],[[-4,4,7]],[[193,130,12]],[1831],[[-2,1,-6]],[[346,245,8]],[[-11,-8,2]],[[20,8,-5]],[[-4,14,11]],[[-10,4,5]],[[-8,-1,6]],[[-10,-8,-3]],[[-8,-3,-4]],[[-16,-213,-146]],[1873],[[5,-8,-6]],[[-134,-146,-19]],[[-4,8,1]],[[-10,-16,-7]],[[-8,-5,4]],[[19,6,-6]],[[-160,6,47]],[[20,8,-3]],[[-95,2,80]],[[22,12,-3]],[[98,-228,-209]],[[17,10,0]],[[-68,40,89]],[[13,-4,-10]],[[506,107,-172]],[[2,-10,-9]],[[23,14,-2]],[[16,4,-3]],[[20,1,-8]],[[409,-44,-224]],[1951],[[-4,-4,5]],[[361,74,-116]],[[4,-12,-11]],[[440,240,-49]],[1987],[1993],[[-16,-6,5]],[[181,-6,-66]],[1999]]

list_I = [Oh.ideal([Kh(Igen) for Igen in Ia]) for Ia in list_I_raw]
print("there are {} prime ideals above the {} prime numbers up to B={}".format(len(list_I), len(PrB), B))

#N = 10**5 # 10^5 = 1 min on muscox
N = 10**8 #N = 10**8 div 32; # catrel
cores = 8 #cores = 128
Ni = N // cores
A = 10**6
print("computing experimentally the valuation for N={} random coprime pairs".format(N))
#print("id = {}, {} samples".format(id, Ni))
#sum_val_I, ratio_coprime_pairs_Oh = MonteCarlo_count_val(Ni,A,Oh,Oh1,deg_h,f,list_I)

ratio_coprime_pairs_Oh = 0.586586533506123938562078373349
sum_val_I = [ 166659190, 53321326, 99987930, 0, 8009749, 292240, 18335034, 827368, 0, 5902557, 345280, 29189, 8717113, 376486, 3330663, 238472, 3351, 0, 2441399, 118637, 1244, 2128615, 44867, 1889475, 35712, 0, 0, 3279590, 1639977, 0, 2987126, 2987102, 1494030, 0, 0, 1351018, 5482214, 2737118, 214, 0, 14404, 1124408, 12625, 103, 0, 0, 971470, 1943364, 0, 2794628, 17515, 157, 1768629, 31282, 55, 1528396, 0, 730383, 21402, 30, 0, 4420, 1325290, 661638, 1323692, 0, 98, 1197022, 7072, 1157620, 0, 1117242, 3143, 29, 523418, 0, 518566, 1034616, 0, 1015569, 2577, 0, 20, 0, 0, 2020, 11, 0, 0, 0, 0, 0, 798019, 1573, 388080, 0, 379801, 1375, 0, 1406, 738006, 0, 0, 9, 1425009, 2471, 2, 340954, 1144, 650759, 325320, 0, 643264, 0, 7, 631545, 0, 3, 4, 287963, 1667, 2, 0, 0, 0, 1448, 544742, 544896, 545478, 0, 6, 261152, 1351, 0, 0, 2, 0, 2543, 2, 0, 1167, 1, 464377, 552, 0, 912716, 0, 0, 0, 509, 0, 0, 0, 0, 465, 0, 0, 944, 0, 859, 1, 203428, 0, 200648, 0, 401043, 0, 0, 196319, 826, 0, 0, 382985, 0, 191303, 1, 366668, 183155, 182831, 358812, 293, 0, 301, 176052, 0, 0, 0, 0, 173428, 169685, 262, 168370, 0, 0, 272, 0, 0, 326036, 0, 163108, 0, 510, 323048, 0, 323953, 0, 311380, 255, 155656, 311021, 310961, 0, 0, 611679, 440, 303984, 466, 0, 151268, 151484, 1, 0, 419, 293084, 0, 2, 142859, 0, 0, 0, 801, 274485, 0, 138041, 0, 1, 268660, 0, 0, 263607, 264342, 0, 262744, 353, 0, 0, 154, 254842, 126725, 254480, 250867, 156, 123305, 169, 0, 0, 169, 0, 0, 299, 0, 0, 234, 235066, 0, 234611, 233054, 0, 0, 115679, 287, 0, 113635, 129, 0, 0, 141, 0, 219111, 0, 0, 0, 0, 215325, 0, 0, 0, 0, 0, 225, 104960, 0, 102763, 103205, 102958, 102880, 225, 408756, 114, 101762, 0, 201722, 200726, 0, 0, 200491, 0, 0, 98724, 198294, 97965, 0, 0, 195, 0, 97717, 196593, 97664, 0, 0, 0, 190681, 91, 0, 188526, 83, 0, 0, 0, 0, 89, 182865, 91256, 0, 0, 80, 90069, 0, 0, 0, 89242, 0, 178361, 0, 0, 0, 152, 0, 86581, 77, 0, 337307, 0, 168912, 0, 0, 80, 0, 0, 0, 156, 0, 133, 0, 0, 0, 1, 0, 160409, 80463, 159434, 0, 0, 120, 0, 78029, 126, 155539, 57, 1, 0, 152931, 65, 0, 153868, 0, 0, 61, 0, 0, 151506, 151408, 75577, 0, 146634, 104, 0, 0, 0, 60, 0, 71612, 71556, 0, 0, 0, 0, 70041, 0, 0, 140055, 54, 0, 108, 0, 69096, 103, 0, 0, 0, 270436, 97, 0, 67351, 48, 0, 66624, 0, 67174, 83, 65845, 40, 65989, 50, 0, 131509, 130913, 65180, 65139, 129151, 64712, 0, 65157, 64178, 84, 0, 31, 0, 63665, 0, 0, 126505, 36, 125147, 125454, 0, 62718, 0, 0, 79, 0, 62248, 62438, 0, 42, 62233, 33, 0, 123677, 123023, 0, 0, 57, 0, 0, 59399, 67, 119624, 0, 59658, 0, 118041, 67, 0, 116839, 38, 0, 72, 0, 0, 0, 0, 0, 0, 56873, 0, 56541, 0, 111811, 112567, 55829, 55397, 27, 0, 0, 0, 25, 0, 60, 0, 108263, 0, 0, 53858, 53437, 0, 0, 53718, 53594, 0, 0, 53186, 0, 0, 0, 106100, 0, 21, 52635, 54, 52573, 35, 0, 43, 51574, 28, 103387, 103364, 103237, 0, 47, 0, 0, 19, 101090, 15, 0, 0, 50033, 0, 0 ]

print("\nratio_coprime_pairs = {}".format(ratio_coprime_pairs_Oh))
print("\nsum_val_I = {}".format(sum_val_I))
#print("\nratio_coprime_pairs_{} = {}".format(id, ratio_coprime_pairs_Oh))
#print("\nsum_val_I_{} = {}".format(id, sum_val_I))

#quit

thr_val, thr_val_non_Pr, idx_bad_I, idx_proj_I = compute_expected_valuation(list_I,f,I_disc_f,Kh,Oh,Oh1,Kh_x1x2)

av_val = [float(sum_val_I[j]/N) for j in range(len(list_I))]
ratio = ratio_val(av_val, thr_val)
ratio_non_Pr = ratio_val(av_val, thr_val_non_Pr)

wrong_values = print_ratio(ratio, thr_val, av_val, 0.2, N, min_hit_I=100)
print("possibly wrong values at indices {}".format(wrong_values))
print("ideals concerned:")
for idx_wrong in wrong_values:
    I = list_I[idx_wrong]
    Norm_I = abs(ZZ(I.norm()))
    I_pr = I.is_principal()
    if I_pr:
        gen = I.gens_reduced()[0]
	gen_s = "{:11s}".format(str(Kh(gen)))
    else:
        gen1, gen2 = I.gens_two()
	gen_s = "{},{}".format(gen1,gen2)
    if idx_wrong in idx_bad_I:
        str_bad = "bad"
    else:
        str_bad = "good"
    print("I{:2d}, Norm {:6d}, <{}> {}".format(idx_wrong, Norm_I, gen_s, str_bad))

print("the bad ideals are at index: {}".format(idx_bad_I))

s = ""
for i in idx_bad_I:
    s += "{:.5f}, ".format(float(ratio[i]))
print("the ratio between experimental and theoretical expected valuation for bad ideals is:  ["+s+"]")
print("these bad ideals are principal: {}".format([list_I[i].is_principal() for i in idx_bad_I]))

print("projective roots:")
print("the ideals dividing ld(f) are at index: {}".format(idx_proj_I))
s = ""
for i in idx_proj_I:
    s += "{:.5f}, ".format(float(ratio[i]))
print("the ratio between experimental and theoretical expected valuation for these ideals is:  ["+s+"]")
print("these ideals are principal: {}".format([list_I[i].is_principal() for i in idx_proj_I]))


print("\nwith I.gens_two():")
wrong_values, idx_wrong = print_err_val_non_principal_ideal(thr_val, thr_val_non_Pr)

print("possibly wrong values at indices {}".format(idx_wrong))
print("ideals concerned:")
for idx in idx_wrong:
    I = list_I[idx]
    Norm_I = abs(ZZ(I.norm()))
    I_pr = I.is_principal()
    gen1, gen2 = I.gens_two()
    gen_s_two = "{},{}".format(gen1,gen2)
    if I_pr:
        gen = I.gens_reduced()[0]
	gen_s = "{:11s}".format(str(Kh(gen)))
        print("I{:2d}, Norm {:6d}, <{}> (gens_two <{}>)".format(idx, Norm_I, gen_s, gen_s_two))
    else:
        print("I{:2d}, Norm {:6d}, <{}>".format(idx, Norm_I, gen_s_two))

alpha_f = alpha_TNFS_2d(fyX,h,B,test_principal=True)
print("now computes alpha: {}".format(alpha_f))
print("in basis 2: {:.3f}/log(2) = {:.3f}\n".format(float(alpha_f), float(alpha_f/log(2))))
print("computes alpha without testing for principal ideals:")
alpha_f_ = alpha_TNFS_2d(fyX,h,B,test_principal=False)
print("             alpha: {}".format(alpha_f_))


"""

# nice latex printing
RR = RealField()

print("bad ideals")
for i in idx_bad_I:
    I = list_I[i]
    #d_I = I.degree()
    d_I = I.residue_class_degree()
    gens = I.gens_two()
    l = gens[0]
    l = ZZ(l)
    if len(gens) > 1:
	fi = gens[1]
	fi = ZZy([ZZ(ai) for ai in fi.list()])
	gen_s = "{:3d},{:7s}".format(l,str(fi))
    else:
	gen_s = "{:3d}        ".format(l)
    if d_I > 1:
	print("${:3d}^{}$ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, d_I, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
    else:
	print("${:3d}  $ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))

print("regular ideals")
for i in range(100):
    if thr_val[i] == 0 or i in idx_proj_I or i in idx_bad_I:
	continue
    I = list_I[i]
    #d_I = I.degree()
    d_I = I.residue_class_degree()
    #gens = I.generators()
    gens = I.gens_two()
    l = gens[0]
    l = ZZ(l)
    if len(gens) > 1:
	fi = gens[1]
	fi = ZZy([ZZ(ai) for ai in fi.list()])
	gen_s = "{:3d},{:7s}".format(l,str(fi))
    else:
	gen_s = "{:3d}        ".format(l)
    if d_I > 1:
	print("${:3d}^{}$ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, d_I, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
    else:
	print("${:3d}  $ & $\\langle {:12s} \\rangle$ & {} & {:18s} & {:.7f} & {:.7f} & {:.7f} \\\\".format(l, gen_s, I_disc_f.valuation(I), thr_val[i], float(thr_val[i]), float(av_val[i]), float(ratio[i])))
"""
